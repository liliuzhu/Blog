<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Luther Li&#39;s Blog</title>
  
  <subtitle>越努力，越精彩</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://liliuzhu.gitee.io/blog/"/>
  <updated>2020-11-03T11:39:37.434Z</updated>
  <id>https://liliuzhu.gitee.io/blog/</id>
  
  <author>
    <name>Luther Li</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS设计模式之代理模式&amp;发布订阅模式的拓展参考</title>
    <link href="https://liliuzhu.gitee.io/blog/2020/11/JS-design-patterns-share-1.html"/>
    <id>https://liliuzhu.gitee.io/blog/2020/11/JS-design-patterns-share-1.html</id>
    <published>2020-11-03T19:25:22.000Z</published>
    <updated>2020-11-03T11:39:37.434Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Nov 03 2020 20:10:34 GMT+0800 (GMT+08:00) --><h2 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h2><p>设计模式的定义：</p><p>在面向对象软件设计过程中针对特定问题的简洁而优雅的解决方案。</p><p>通俗说就是在某种场合下对某个问题的一种解决方案<br>-出自《JavsSctipt设计模式与开发实践》<br><a id="more"></a></p><h2 id="设计模式的由来"><a href="#设计模式的由来" class="headerlink" title="设计模式的由来"></a>设计模式的由来</h2><p>设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的</p><h2 id="介绍两种常用的设计模式"><a href="#介绍两种常用的设计模式" class="headerlink" title="介绍两种常用的设计模式"></a>介绍两种常用的设计模式</h2><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><h4 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h4><p><strong>为一个对象找一个替代对象，以便对原对象进行访问</strong></p><p>代理模式是一种非常有意义的模式，在生活中可以找到很多代理模式的场景。比如，明星都<br>有经纪人作为代理。如果想请明星来办一场商业演出，只能联系他的经纪人。经纪人会把商业演<br>出的细节和报酬都谈好之后，再把合同交给明星签。</p><p>代理模式的关键是，当应用端不方便直接访问一个对象或者不满足需要的时候，提供一个替身<br>对象来控制对这个对象的访问，应用端实际上访问的是替身对象。替身对象对请求做出一些处理之<br>后，再把请求转交给本体对象。</p><h4 id="模式细分"><a href="#模式细分" class="headerlink" title="模式细分"></a>模式细分</h4><p>虚拟代理（将开销大的运算延迟到需要时执行）<br>缓存代理（为开销大的运算结果提供缓存）<br>保护代理（黑白双簧，代理充当黑脸，拦截非分要求）<br>防火墙代理（控制网络资源的访问）<br>远程代理（为一个对象在不同的地址控件提供局部代表）<br>智能引用代理（访问对象执行一些附加操作）<br>写时复制代理（延迟对象复制过程，对象需要真正修改时才进行）</p><p>代理模式的变体种类非常多，限于其在js中的适用性还有个人的理解，这里只简单介绍一下几个常用的代理</p><h5 id="保护代理"><a href="#保护代理" class="headerlink" title="保护代理"></a>保护代理</h5><p>保护代理主要实现了访问主体的限制行为，代理B可以帮助A过滤掉一些请求。<br>代理对象可预先对请求进行处理，再决定是否转交给本体，代理和本体对外接口保持一致性</p><p>比如：</p><ol><li>过滤敏感信息</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主体，发送消息</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendMsg</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(msg)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 代理，对消息进行过滤</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">proxySendMsg</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 无消息则直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> msg === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'deny'</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">// 有消息则进行过滤</span></span><br><span class="line">    msg = (<span class="string">''</span> + msg).replace(<span class="regexp">/泥\s*煤/g</span>, <span class="string">''</span>)</span><br><span class="line"> </span><br><span class="line">    sendMsg(msg)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">sendMsg(<span class="string">'泥煤呀泥 煤呀'</span>) <span class="comment">// 泥煤呀泥 煤呀</span></span><br><span class="line">proxySendMsg(<span class="string">'泥煤呀泥 煤'</span>) <span class="comment">// 呀</span></span><br><span class="line">proxySendMsg() <span class="comment">// deny</span></span><br></pre></td></tr></table></figure><ol start="2"><li>黑名单拦截 - 拒绝访问主体，保护代理的形式</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例子：代理接听电话，实现拦截黑名单</span></span><br><span class="line"><span class="keyword">var</span> backPhoneList = [<span class="string">'189XXXXX140'</span>];       <span class="comment">// 黑名单列表</span></span><br><span class="line"><span class="comment">// 代理</span></span><br><span class="line"><span class="keyword">var</span> ProxyAcceptPhone = <span class="function"><span class="keyword">function</span>(<span class="params">phone</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 预处理</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'电话正在接入...'</span>);</span><br><span class="line">    <span class="keyword">if</span> (backPhoneList.includes(phone)) &#123;</span><br><span class="line">        <span class="comment">// 屏蔽</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'屏蔽黑名单电话'</span>);</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    AcceptPhone.call(<span class="keyword">this</span>, phone);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 本体</span></span><br><span class="line"><span class="keyword">var</span> AcceptPhone = <span class="function"><span class="keyword">function</span>(<span class="params">phone</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'接听电话:'</span>, phone);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 外部调用代理</span></span><br><span class="line">ProxyAcceptPhone(<span class="string">'189XXXXX140'</span>); </span><br><span class="line">ProxyAcceptPhone(<span class="string">'189XXXXX141'</span>);</span><br></pre></td></tr></table></figure><h4 id="虚拟代理（延迟执行）"><a href="#虚拟代理（延迟执行）" class="headerlink" title="虚拟代理（延迟执行）"></a>虚拟代理（延迟执行）</h4><p>实例：</p><ol><li>图片loading预加载<br>在 Web 开发中，图片预加载是一种常用的技术，如果直接给某个 img标签节点设置 src属性，<br>由于图片过大或者网络不佳，图片的位置往往有段时间会是一片空白。常见的做法是先用一张<br>loading 图片占位，然后用异步的方式加载图片，等图片加载好了再把它填充到 img节点里。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myImage = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">     <span class="keyword">var</span> imgNode = <span class="built_in">document</span>.createElement( <span class="string">'img'</span> ); </span><br><span class="line">     <span class="built_in">document</span>.body.appendChild( imgNode ); </span><br><span class="line">    </span><br><span class="line">     <span class="keyword">return</span> &#123; </span><br><span class="line">         setSrc: <span class="function"><span class="keyword">function</span>(<span class="params"> src </span>)</span>&#123; </span><br><span class="line">             imgNode.src = src; </span><br><span class="line">         &#125; </span><br><span class="line">     &#125; </span><br><span class="line">    &#125;)(); </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> proxyImage = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">     <span class="keyword">var</span> img = <span class="keyword">new</span> Image; </span><br><span class="line">     img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">         myImage.setSrc( <span class="keyword">this</span>.src ); </span><br><span class="line">     &#125; </span><br><span class="line">     <span class="keyword">return</span> &#123; </span><br><span class="line">         setSrc: <span class="function"><span class="keyword">function</span>(<span class="params"> src </span>)</span>&#123; </span><br><span class="line">             myImage.setSrc( <span class="string">'./car_image.png'</span> ); </span><br><span class="line">             img.src = src; </span><br><span class="line">         &#125; </span><br><span class="line">     &#125; </span><br><span class="line">    &#125;)(); </span><br><span class="line">    </span><br><span class="line">    proxyImage.setSrc( <span class="string">'http://pic1.win4000.com/wallpaper/d/58db13651c910.jpg'</span> );</span><br></pre></td></tr></table></figure><h4 id="缓存代理（暂时存储）"><a href="#缓存代理（暂时存储）" class="headerlink" title="缓存代理（暂时存储）"></a>缓存代理（暂时存储）</h4><p>缓存代理可以为一些开销大的运算结果提供暂时存储，在下次运算时，如果传递进来的参数和之前的一致，则可以直接返回前面存储的结果，而不是重新进行本体运算，减少本体调用次数。</p><p>例如，前后端分离，向后端请求分页的数据的时候，每次页码改变时都需要重新请求后端数据，我们可以将页面和对应的结果进行缓存，当请求同一页的时候，就不再请求后端的接口而是从缓存中去取数据。(这种场景也是有要求的，数据不会轻易变更的列表使用)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 斐波那契数列</span></span><br><span class="line"><span class="keyword">const</span> getFibonacci = <span class="function">(<span class="params">number</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (number &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getFibonacci(number - <span class="number">1</span>) + getFibonacci(number - <span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代理对象，创建缓存代理的工厂,参数fn可以为任意需要进行代理的函数，除了上述计算的本体对象函数外，还可以是进行其他操作的本体函数</span></span><br><span class="line"><span class="keyword">const</span> getCacheProxy = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> resultCache = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.time(<span class="string">'getFibonacciTime'</span>)</span><br><span class="line">            <span class="keyword">const</span> args = <span class="built_in">Array</span>.prototype.join.call(<span class="built_in">arguments</span>, <span class="string">','</span>)</span><br><span class="line">            <span class="keyword">if</span>(!(args <span class="keyword">in</span> resultCache))&#123; <span class="comment">//测试对象中是否有对应的name，有则直接返回该name的值</span></span><br><span class="line">                resultCache[args] = fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">console</span>.timeEnd(<span class="string">'getFibonacciTime'</span>)</span><br><span class="line">            <span class="keyword">return</span> resultCache[args]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getFibProxy = getCacheProxy(getFibonacci);</span><br><span class="line"><span class="built_in">console</span>.log(getFibProxy(<span class="number">40</span>))</span><br><span class="line"><span class="built_in">console</span>.log(getFibProxy(<span class="number">41</span>))</span><br><span class="line"><span class="built_in">console</span>.log(getFibProxy(<span class="number">42</span>))</span><br><span class="line"><span class="built_in">console</span>.log(getFibProxy(<span class="number">43</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getFibProxy(<span class="number">40</span>))</span><br><span class="line"><span class="built_in">console</span>.log(getFibProxy(<span class="number">41</span>))</span><br><span class="line"><span class="built_in">console</span>.log(getFibProxy(<span class="number">42</span>))</span><br><span class="line"><span class="built_in">console</span>.log(getFibProxy(<span class="number">43</span>))</span><br></pre></td></tr></table></figure><h5 id="模式特点"><a href="#模式特点" class="headerlink" title="模式特点"></a>模式特点</h5><ol><li>代理对象可预先处理请求，再决定是否转交给本体</li><li>代理和本体对外显示接口保持一致性</li><li>代理对象仅对本体做一次包装</li></ol><h5 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h5><h6 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h6><ul><li>可拦截和监听外部对本体对象的访问</li><li>复杂运算前可以进行校验或资源管理</li><li>对象职能粒度细分，函数功能复杂度降低，符合 “单一职责原则”</li><li>依托代理，可额外添加扩展功能，而不修改本体对象，符合 “开发-封闭原则”</li></ul><h6 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h6><ul><li>额外代理对象的创建，增加部分内存开销</li><li>处理请求速度可能有差别，非直接访问存在开销，但 “虚拟代理” 及 “缓存代理” 均能提升性能</li></ul><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>但是在业务开发时应该注意使用场景，不需要在编写对象时就去预先猜测是否需要使用代理模式，只有当对象的功能变得复杂或者我们需要进行一定的访问限制时，再考虑使用代理。</p><p>js中常用的代理模式有虚拟代理和缓存代理两种</p><p><strong>注意：面向对象设计的原则——单一职责原则</strong></p><p>单一职责原则指的是，就一个类（通常也包括对象和函数等）而言，应该仅有一个引起它变化的原因。如果一个对象承担了多项职责，就意味着这个对象将变得巨大，引起它变化的原因可能会有多个。面向对象设计鼓励将行为分布到细粒度的对象之中，如果一个对象承担的职责过多，等于把这些职责耦合到了一起，这种耦合会导致脆弱和低内聚的设计。当变化发生时，设计可能会遭到意外的破坏。</p><p>就是对本体而言，功能要相对单一，便于拓展和代理的维护</p><h3 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h3><p>定义：<br>发布 — 订阅模式又叫观察者模式，它定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知。</p><p>之前通通曾经结合vue源码介绍过该设计模式的一些原理<br>所以在原理和结构方面不做详细的介绍，对该模式进行扩展的一个介绍</p><p>问大家一个问题，用发布订阅模式时，先发布还是先订阅？必须先订阅再发布吗？</p><p>我们所了解到的发布订阅模式，都是订阅者先订阅一个消息，随后才能接收到发布者发布的消息。如果把顺序反过来，发布者先发布一条信息，而在之前并没有对象来订阅它，这条消息无疑将会被当作垃圾回收掉。</p><p>在某些情况下，我们需要将这条信息保留下来，等到有对象来订阅它的时候，再重新把消息发布给订阅者。就如同QQ中的离线消息一样，离线信息被保存在服务器中，接收人下次登录上线之后，可以重新收到这条信息。</p><p>这种需求在实际项目中是存在的，比如在网站中，获取到用户信息之后才能渲染用户信息，而获取用户信息的操作是一个ajax异步请求。当aja请求成功返回之后会发布一个事件，在此之前订阅了此事件的用户导航模块可以接收到这些用户信息</p><p>但是这只是理想的状况，因为异步的原因，我们不能保证ajax请求返回的时间，有时候它返 回得比较快，而此时用户信息模块的代码还没有加载好（还没有订阅相应事件），特别是在用了 一些模块化惰性加载的技术后，这是很可能发生的事情。也许我们还需要一个方案，使得我们的 发布—订阅对象拥有先发布后订阅的能力。</p><p>为了满足这个需求，我们要建立一个存放离线事件的堆栈，当事件发布的时候，如果此时还<br>没有订阅者来订阅这个事件，我们暂时把发布事件的动作包裹在一个函数里，这些包装函数将被 存入堆栈中，等到终于有对象来订阅此事件的时候，我们将遍历堆栈并且依次执行这些包装函数， 也就是重新发布里面的事件。当然离线事件的生命周期只有一次，就像QQ的未读消息只会被重新阅读一次，所以刚才的操作我们只能进行一次。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>() &#123;</span><br><span class="line">            <span class="comment">// 观察者</span></span><br><span class="line">            <span class="keyword">this</span>._observer = &#123;&#125;</span><br><span class="line">            <span class="keyword">this</span>._offlineStack = &#123;&#125; <span class="comment">// 离线事件</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        _handlefflineStack (type) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>._offlineStack[type]) &#123;</span><br><span class="line">                <span class="keyword">const</span> handlers = <span class="keyword">this</span>._offlineStack[type]</span><br><span class="line">                <span class="keyword">this</span>._offlineStack[type] = []</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">const</span> handler <span class="keyword">of</span> handlers) &#123;</span><br><span class="line">                    handler()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        on (type, handler) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>._observer[type]) &#123;</span><br><span class="line">                <span class="keyword">this</span>._observer[type] = [];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>._observer[type].push(handler);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>._handlefflineStack(type)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">        &#125;</span><br><span class="line">        once (type, handler) &#123;</span><br><span class="line">            <span class="keyword">const</span> _self = <span class="keyword">this</span></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">on</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                _self.off(type, on)</span><br><span class="line">                handler.apply(_self, <span class="built_in">arguments</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            _self.on(type, on)</span><br><span class="line">            <span class="keyword">return</span> _self</span><br><span class="line">        &#125;</span><br><span class="line">        emit (type, ...args) &#123;</span><br><span class="line">            <span class="keyword">const</span> handlers = <span class="keyword">this</span>._observer[type] || []</span><br><span class="line">            <span class="keyword">if</span>(!handlers || !handlers.length) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!<span class="keyword">this</span>._offlineStack[type]) &#123;</span><br><span class="line">                    <span class="keyword">this</span>._offlineStack[type] = [];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">const</span> _self = <span class="keyword">this</span></span><br><span class="line">                <span class="keyword">const</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> _self.emit(type, ...args);</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="keyword">this</span>._offlineStack[type].push(fn);</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">const</span> handler <span class="keyword">of</span> handlers) &#123;</span><br><span class="line">                handler(...args)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        off (type, handler) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>._observer[type]) &#123;</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!handler || <span class="keyword">typeof</span> handler !== <span class="string">'function'</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>._observer[type] = []</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>._observer[type] = <span class="keyword">this</span>._observer[type].filter(<span class="function"><span class="params">val</span> =&gt;</span> val !== handler)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> observer = <span class="keyword">new</span> Observer()</span><br><span class="line"></span><br><span class="line">    observer.emit(<span class="string">'click'</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>)</span><br><span class="line">    setTimeout( <span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">        observer.once(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        observer.emit(<span class="string">'click'</span>, <span class="number">6564657</span>)</span><br><span class="line">        observer.on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">    observer.emit(<span class="string">'click'</span>, <span class="number">2345</span>, <span class="number">7</span>)</span><br></pre></td></tr></table></figure><p>离线功能的问题：</p><ol><li>发布出去的信息如果一直没有匹配到相应的订阅事件，会一直把未被订阅的信息保存着，占用内存</li><li>首先发布出去的信息，只能被第一次订阅的事件获取到，后面订阅的同样的事件，无法获取到之前已经发布且被订阅的信息。即未被订阅的发布出去的信息，仅能触发一次订阅</li></ol><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ol><li>《JavsSctipt设计模式与开发实践》</li></ol><blockquote><p>本文首发于个人技术博客 <a href="https://liliuzhu.gitee.io/blog">https://liliuzhu.gitee.io/blog</a></p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Nov 03 2020 20:10:34 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;概念：&quot;&gt;&lt;a href=&quot;#概念：&quot; class=&quot;headerlink&quot; title=&quot;概念：&quot;&gt;&lt;/a&gt;概念：&lt;/h2&gt;&lt;p&gt;设计模式的定义：&lt;/p&gt;&lt;p&gt;在面向对象软件设计过程中针对特定问题的简洁而优雅的解决方案。&lt;/p&gt;&lt;p&gt;通俗说就是在某种场合下对某个问题的一种解决方案&lt;br&gt;-出自《JavsSctipt设计模式与开发实践》&lt;br&gt;
    
    </summary>
    
      <category term="原创" scheme="https://liliuzhu.gitee.io/blog/categories/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="前端" scheme="https://liliuzhu.gitee.io/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="设计模式" scheme="https://liliuzhu.gitee.io/blog/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="JS" scheme="https://liliuzhu.gitee.io/blog/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>vue-router实现原理分享</title>
    <link href="https://liliuzhu.gitee.io/blog/2020/11/vue-router-principle-sharing.html"/>
    <id>https://liliuzhu.gitee.io/blog/2020/11/vue-router-principle-sharing.html</id>
    <published>2020-11-03T18:25:27.000Z</published>
    <updated>2020-11-03T10:51:30.548Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Nov 03 2020 20:10:34 GMT+0800 (GMT+08:00) --><p>这是很久之前的我们业务组内部的一个分享，一直没有更新发布了。乘此再复习一遍</p><h2 id="vue-router-是什么"><a href="#vue-router-是什么" class="headerlink" title="vue-router  是什么"></a>vue-router 是什么</h2><p>首先我们需要知道vue-router是什么，它是干什么的？</p><p>这里的路由并不是指我们平时所说的硬件路由器，这里的路由就是SPA（单页应用）的路径管理器。 换句话说，vue-router就是WebApp的链接路径管理系统。</p><p>路由是根据不同的url地址展示不同的内容或者页面。前端路由就是把不同路由对应不同的内容或者页面的任务交给前端来做，之前是通过服务端根据url的不同返回不同的页面实现的。</p><p>vue-router是Vue.js官方的路由插件，它和vue.js是深度集成的，适合用于构建单页面应用。<br><a id="more"></a></p><p>那与传统的页面跳转有什么区别呢？</p><ol><li>vue的单页面应用是基于路由和组件的，路由用于设定访问路径，并将路径和组件映射起来。</li><li>传统的页面应用，是用一些超链接来实现页面切换和跳转的。</li></ol><p>在vue-router单页面应用中，则是路径之间的切换，也就是组件的切换。路由模块的本质 就是建立起url和页面之间的映射关系。</p><h2 id="vue-router-产生的时代背景"><a href="#vue-router-产生的时代背景" class="headerlink" title="vue-router 产生的时代背景"></a>vue-router 产生的时代背景</h2><p>随着 ajax 的流行，异步数据请求交互运行在不刷新浏览器的情况下进行。而异步交互体验的更高级版本就是 SPA —— 单页应用。单页应用不仅仅是在页面交互是无刷新的，连页面跳转都是无刷新的，为了实现单页应用，所以就有了前端路由。</p><h2 id="为什么要使用vue-router"><a href="#为什么要使用vue-router" class="headerlink" title="为什么要使用vue-router"></a>为什么要使用vue-router</h2><p>至于我们为啥不能用a标签，这是因为用Vue做的都是单页面应用（当你的项目准备打包时，运行 npm run build时，就会生成dist文件夹，这里面只有静态资源和一个index.html页面，在没有后端服务的支持下，浏览器无法找到对应的url路径的），所以你写的标签是不起作用的，你必须使用vue-router来进行管理。</p><p>Vue Router 包含的功能有：</p><ul><li>嵌套的路由/视图表</li><li>模块化的、基于组件的路由配置</li><li>路由参数、查询、通配符</li><li>基于 Vue.js 过渡系统的视图过渡效果</li><li>细粒度的导航控制</li><li>带有自动激活的 CSS class 的链接</li><li>HTML5 历史模式或 hash 模式，在 IE9 中自动降级</li><li>自定义的滚动条行为</li></ul><h2 id="如何使用vue-router"><a href="#如何使用vue-router" class="headerlink" title="如何使用vue-router"></a>如何使用vue-router</h2><p>不做讲解，都用过无数遍了。看vue-router文档 <a href="https://router.vuejs.org/zh/" target="_blank" rel="noopener">https://router.vuejs.org/zh/</a></p><h2 id="vue-router实现原理"><a href="#vue-router实现原理" class="headerlink" title="vue-router实现原理"></a>vue-router实现原理</h2><p>SPA(single page application):单一页面应用程序，只有一个完整的页面；它在加载页面时，不会加载整个页面，而是只更新某个指定的容器中内容。</p><p>vue-router 使用 <a href="https://github.com/pillarjs/path-to-regexp" target="_blank" rel="noopener">path-to-regexp</a> 作为路径匹配引擎，用来匹配path和params</p><p>单页面应用(SPA)的核心之一是:</p><ol><li>更新视图而不重新请求页面</li><li>vue-router在实现单页面前端路由时，提供了三种方式：Hash模式和History模式；根据mode参数以及运行环境决定采用哪一种方式。</li></ol><h3 id="1-hash-模式"><a href="#1-hash-模式" class="headerlink" title="1. hash 模式"></a>1. hash 模式</h3><p>vue-router 默认 hash 模式 —— 使用 URL 的 hash 来模拟一个完整的 URL，于是当 URL 改变时，页面不会重新加载。hash（#）是URL 的锚点，代表的是网页中的一个位置，单单改变#后的部分，浏览器只会滚动到相应位置，不会重新加载网页，也就是说hash 出现在 URL 中，但不会被包含在 http 请求中，对后端完全没有影响，因此改变 hash 不会重新加载页面；同时每一次改变#后的部分，都会在浏览器的访问历史中增加一个记录，使用”后退”按钮，就可以回到上一个位置；所以说Hash模式通过锚点值的改变，根据不同的值，渲染指定DOM位置的不同数据。hash 模式的原理是 onhashchange 事件(监测hash值变化)，可以在 window 对象上监听这个事件。</p><p>在 2014 年之前，大家是通过 hash 来实现路由，url hash 就是类似于：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">http:</span>//www.renrenche.com/<span class="meta">#/page1</span></span><br></pre></td></tr></table></figure><p>后来，因HTML5的发布，又出现了一个onpopstate事件，其可以代替onhashchange使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(</span><br><span class="line">  supportsPushState ? <span class="string">'popstate'</span> : <span class="string">'hashchange'</span>,</span><br><span class="line">  () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> current = <span class="keyword">this</span>.current</span><br><span class="line">    <span class="keyword">if</span> (!ensureSlash()) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.transitionTo(getHash(), route =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (supportsScroll) &#123;</span><br><span class="line">        handleScroll(<span class="keyword">this</span>.router, route, current, <span class="literal">true</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (!supportsPushState) &#123;</span><br><span class="line">        replaceHash(route.fullPath)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="2-history-模式"><a href="#2-history-模式" class="headerlink" title="2. history 模式"></a>2. history 模式</h3><p>由于hash模式会在url中自带#，如果不想要很丑的hash，我们可以用vue-router的 history 模式。</p><p>14年后，因为HTML5标准发布。html5 history interface 中新增的了 pushState() 和 replaceState()方法这两个方法应用于浏览器记录栈，在当前已有的 back、forward、go基础之上，它们提供了对历史记录修改的功能。只是当它们执行修改时，虽然改变了当前的URL，但浏览器不会立即向后端发送请求。同时还有popstate事件。通过这些就能用另一种方式来实现前端路由了，但原理都是跟hash实现相同的。</p><p>当你使用 history 模式时，URL就像正常的url，单页路由的url就不会多出一个#，例如 <a href="http://shanyishanmei.com/user/id" target="_blank" rel="noopener">http://shanyishanmei.com/user/id</a> 变得更加美观！但因为没有#号，所以当用户刷新页面之类的操作时，浏览器还是会给服务器发送请求。为了避免出现这种情况，所以这个实现需要服务器的支持，需要把所有路由都重定向到根页面。因为我们的应用是个单页客户端应用，如果后台没有正确的配置，当用户在浏览器直接访问<a href="http://shanyishanmei.com/user/id2就会返回404，这就不对了。所以呢，你要在服务端增加一个覆盖所有情况的候选资源：如果" target="_blank" rel="noopener">http://shanyishanmei.com/user/id2就会返回404，这就不对了。所以呢，你要在服务端增加一个覆盖所有情况的候选资源：如果</a> URL 匹配不到任何静态资源，则应该返回同一个index.html页面，这个页面就是你 app 依赖的页面。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'popstate'</span>, e =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> current = <span class="keyword">this</span>.current</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Avoiding first `popstate` event dispatched in some browsers but first</span></span><br><span class="line">  <span class="comment">// history route not updated since async guard at the same time.</span></span><br><span class="line">  <span class="comment">// 避免在某些浏览器中触发第一个“popstate”事件，但同时由于异步保护而未更新第一个历史路由。</span></span><br><span class="line">  <span class="keyword">const</span> location = getLocation(<span class="keyword">this</span>.base)</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.current === START &amp;&amp; location === initLocation) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.transitionTo(location, route =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (supportsScroll) &#123;</span><br><span class="line">      handleScroll(router, route, current, <span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="3-abstract-模式"><a href="#3-abstract-模式" class="headerlink" title="3. abstract 模式"></a>3. abstract 模式</h3><p>通过一个数组和一个数字变量来模拟浏览器的history的。支持所有 JavaScript 运行环境，如 Node.js 服务器端。如果发现没有浏览器的 API，路由会自动强制进入这个模式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span> (router: Router, base: ?string) &#123;</span><br><span class="line">    <span class="keyword">super</span>(router, base)</span><br><span class="line">    <span class="keyword">this</span>.stack = []</span><br><span class="line">    <span class="keyword">this</span>.index = <span class="number">-1</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  push (location: RawLocation, onComplete?: <span class="built_in">Function</span>, onAbort?: <span class="built_in">Function</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.transitionTo(</span><br><span class="line">      location,</span><br><span class="line">      route =&gt; &#123;</span><br><span class="line">        <span class="keyword">this</span>.stack = <span class="keyword">this</span>.stack.slice(<span class="number">0</span>, <span class="keyword">this</span>.index + <span class="number">1</span>).concat(route)</span><br><span class="line">        <span class="keyword">this</span>.index++</span><br><span class="line">        onComplete &amp;&amp; onComplete(route)</span><br><span class="line">      &#125;,</span><br><span class="line">      onAbort</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  replace (location: RawLocation, onComplete?: <span class="built_in">Function</span>, onAbort?: <span class="built_in">Function</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.transitionTo(</span><br><span class="line">      location,</span><br><span class="line">      route =&gt; &#123;</span><br><span class="line">        <span class="keyword">this</span>.stack = <span class="keyword">this</span>.stack.slice(<span class="number">0</span>, <span class="keyword">this</span>.index).concat(route)</span><br><span class="line">        onComplete &amp;&amp; onComplete(route)</span><br><span class="line">      &#125;,</span><br><span class="line">      onAbort</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  go (n: number) &#123;</span><br><span class="line">    <span class="keyword">const</span> targetIndex = <span class="keyword">this</span>.index + n</span><br><span class="line">    <span class="keyword">if</span> (targetIndex &lt; <span class="number">0</span> || targetIndex &gt;= <span class="keyword">this</span>.stack.length) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> route = <span class="keyword">this</span>.stack[targetIndex]</span><br><span class="line">    <span class="keyword">this</span>.confirmTransition(</span><br><span class="line">      route,</span><br><span class="line">      () =&gt; &#123;</span><br><span class="line">        <span class="keyword">this</span>.index = targetIndex</span><br><span class="line">        <span class="keyword">this</span>.updateRoute(route)</span><br><span class="line">      &#125;,</span><br><span class="line">      err =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (isExtendedError(NavigationDuplicated, err)) &#123;</span><br><span class="line">          <span class="keyword">this</span>.index = targetIndex</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="popstate介绍"><a href="#popstate介绍" class="headerlink" title="popstate介绍"></a>popstate介绍</h3><p>当活动历史记录条目更改时，将触发popstate事件。如果被激活的历史记录条目是通过对history.pushState（）的调用创建的，或者受到对history.replaceState（）的调用的影响，popstate事件的state属性包含历史条目的状态对象的副本。</p><p>需要注意的是调用history.pushState()或history.replaceState()不会触发popstate事件。只有在做出浏览器动作时，才会触发该事件，如用户点击浏览器的回退按钮（或者在Javascript代码中调用history.back()）</p><p>不同的浏览器在加载页面时处理popstate事件的形式存在差异。页面加载时Chrome和Safari通常会触发(emit )popstate事件，但Firefox则不会</p><p>根据popstate介绍以及从vue-router源码，当我们手动改变url的hash的时候或者window.location.hash = ‘xxx’,history.go(-1), history.back(),history.forward() 的时候才会触发onpopstate或者onhashchange事件，进而运行回调transitionTo方法。而window.history.replaceState和window.history.pushState，仅会改变历史记录条目，无法触发onpopstate，所以目前hash和history模式下，$router的push,replace方法都是直接调用transitionTo方法来更新视图而后再用history.replaceState和history.pushState改变；历史记录和url</p><h2 id="vue-router源码分析"><a href="#vue-router源码分析" class="headerlink" title="vue-router源码分析"></a>vue-router源码分析</h2><h3 id="install-js-分析"><a href="#install-js-分析" class="headerlink" title="install.js 分析"></a>install.js 分析</h3><ol><li>首先会对重复安装进行过滤</li><li>全局混入beforeCreate和destroyed 生命钩子，为每个Vue实例设置 _routerRoot属性，并为跟实例设置_router属性</li><li>调用Vue中定义的defineReactive对_route进行劫持，其实是执行的依赖收集的过程，执行_route的get就会对当前的组件进行依赖收集，如果对_route进行重新赋值触发setter就会使收集的组件重新渲染，这里也是路由重新渲染的核心所在</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Vue.mixin(&#123;</span><br><span class="line">  beforeCreate () &#123;</span><br><span class="line">    <span class="keyword">if</span> (isDef(<span class="keyword">this</span>.$options.router)) &#123; <span class="comment">// 设置根路由-根组件实例</span></span><br><span class="line">      <span class="keyword">this</span>._routerRoot = <span class="keyword">this</span></span><br><span class="line">      <span class="keyword">this</span>._router = <span class="keyword">this</span>.$options.router</span><br><span class="line">      <span class="keyword">this</span>._router.init(<span class="keyword">this</span>)</span><br><span class="line">      <span class="comment">// 定义响应式的 _route 对象</span></span><br><span class="line">      Vue.util.defineReactive(<span class="keyword">this</span>, <span class="string">'_route'</span>, <span class="keyword">this</span>._router.history.current)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 非根组件设置</span></span><br><span class="line">      <span class="keyword">this</span>._routerRoot = (<span class="keyword">this</span>.$parent &amp;&amp; <span class="keyword">this</span>.$parent._routerRoot) || <span class="keyword">this</span></span><br><span class="line">    &#125;</span><br><span class="line">    registerInstance(<span class="keyword">this</span>, <span class="keyword">this</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  destroyed () &#123;</span><br><span class="line">    registerInstance(<span class="keyword">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="4"><li>为Vue原型对象定义$router和$route属性，并对两个属性进行了劫持，使我们可以直接通过Vue对象实例访问到</li><li>全局注册了Routerview和RouterLink两个组件，所以我们才可以在任何地方使用这两个组件，这两个组件的内容我们稍后分析</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(Vue.prototype, <span class="string">'$router'</span>, &#123;</span><br><span class="line">   <span class="keyword">get</span> () &#123; <span class="keyword">return</span> <span class="keyword">this</span>._routerRoot._router &#125;</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"> <span class="built_in">Object</span>.defineProperty(Vue.prototype, <span class="string">'$route'</span>, &#123;</span><br><span class="line">   <span class="keyword">get</span> () &#123; <span class="keyword">return</span> <span class="keyword">this</span>._routerRoot._route &#125;</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><h3 id="RouterView-和-RouterLink-组件分析"><a href="#RouterView-和-RouterLink-组件分析" class="headerlink" title="RouterView 和 RouterLink 组件分析"></a>RouterView 和 RouterLink 组件分析</h3><h4 id="RouterView"><a href="#RouterView" class="headerlink" title="RouterView"></a>RouterView</h4><p><router-view>是无状态(没有 data ) 和无实例 (没有 this 上下文)的函数式组件。用一个简单的render函数返回虚拟节点使他们更容易渲染。</router-view></p><p><router-view>渲染的组件还可以内嵌<router-view>，根据嵌套路径，渲染嵌套组件。</router-view></router-view></p><p><router-view>类似一个占位插槽，并不会渲染本身DOM模板，而是根据自身所在<router-view>嵌套层级以及<router-view>的render函数的第二个参数作为参数，匹配当前路由($route === $router.history.current)的嵌套层级matched，然后再用已匹配的matched的components中找到和RouterView name相同的组件。并渲染对应匹配到的组件，否则渲染空组件</router-view></router-view></router-view></p><h4 id="RouterLink"><a href="#RouterLink" class="headerlink" title="RouterLink"></a>RouterLink</h4><p>相比<router-view>，<router-link>是一个普通的非抽象组件，通过router的resolve方法解析自身的to属性参数，并调用$router.push或者replace方法进行路由跳转。</router-link></router-view></p><h3 id="index-js-入口分析"><a href="#index-js-入口分析" class="headerlink" title="index.js 入口分析"></a>index.js 入口分析</h3><ol><li>声明Router类，以及原型方法，实例属性等<br>例如一下常用的方法</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">push，replace，go，back，forward, addRoutes等</span><br></pre></td></tr></table></figure><p>全局路由守卫<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">beforeEach，beforeResolve，afterEach</span><br></pre></td></tr></table></figure><p></p><ol start="2"><li>路由模式的判断,以及不同模式采用不同的策略</li><li>等</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mode = options.mode || <span class="string">'hash'</span></span><br><span class="line"><span class="comment">// 通过 supportsPushState 判断浏览器是否支持'history'模式</span></span><br><span class="line"><span class="comment">// 如果设置的是'history'但是如果浏览器不支持的话，'history'模式会退回到'hash'模式</span></span><br><span class="line"><span class="comment">// fallback 是当浏览器不支持 history.pushState 控制路由是否应该回退到 hash 模式。默认值为 true。</span></span><br><span class="line"><span class="keyword">this</span>.fallback = mode === <span class="string">'history'</span> &amp;&amp; !supportsPushState &amp;&amp; options.fallback !== <span class="literal">false</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.fallback) &#123;</span><br><span class="line">  mode = <span class="string">'hash'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不在浏览器内部的话，就会变成'abstract'模式</span></span><br><span class="line"><span class="keyword">if</span> (!inBrowser) &#123;</span><br><span class="line">  mode = <span class="string">'abstract'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.mode = mode</span><br><span class="line"><span class="comment">// 根据不同模式选择实例化对应的 History 类</span></span><br><span class="line"><span class="keyword">switch</span> (mode) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'history'</span>:</span><br><span class="line">    <span class="keyword">this</span>.history = <span class="keyword">new</span> HTML5History(<span class="keyword">this</span>, options.base)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> <span class="string">'hash'</span>:</span><br><span class="line">    <span class="keyword">this</span>.history = <span class="keyword">new</span> HashHistory(<span class="keyword">this</span>, options.base, <span class="keyword">this</span>.fallback)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> <span class="string">'abstract'</span>:</span><br><span class="line">    <span class="keyword">this</span>.history = <span class="keyword">new</span> AbstractHistory(<span class="keyword">this</span>, options.base)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">      assert(<span class="literal">false</span>, <span class="string">`invalid mode: <span class="subst">$&#123;mode&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总体流分析"><a href="#总体流分析" class="headerlink" title="总体流分析"></a>总体流分析</h3><ol><li>安装 vue-router 插件（参考 install.js分析）</li><li>new Router 实例</li><li>根实例创建之前，执行init方法，初始化路由</li><li>执行transitionTo方法，同时hash模式下对浏览器hashChange事件进行了监听，执行history.listen方法，将对_route重新赋值的函数赋给History实例的callback，当路由改变时对_route进行重新赋值从而触发组件更新</li><li>transitionTo方法根据传入的路径从我们定义的所有路由中匹配到对应路由，然后执行confirmTransition</li><li>confirmTransition首先会有重复路由的判断，如果进入相同的路由，直接调用abort回调函数，函数退出，不会执行后面的各组件的钩子函数，这也是为什么我们重复进入相同路由不会触发组建的重新渲染也不会触发路由的各种钩子函数，<br>如果判断不是相同路由，就会执行各组件的钩子函数(高阶函数太多，没看懂)。导航守卫执行顺序</li></ol><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>导航被触发。</span><br><span class="line"><span class="number">2.</span>在失活的组件里调用离开守卫。</span><br><span class="line"><span class="number">3.</span>调用全局的 beforeEach 守卫。</span><br><span class="line"><span class="number">4.</span>在重用的组件里调用 beforeRouteUpdate 守卫 (<span class="number">2.2</span>+)。</span><br><span class="line"><span class="number">5.</span>在路由配置里调用 beforeEnter。</span><br><span class="line"><span class="number">6.</span>解析异步路由组件。</span><br><span class="line"><span class="number">7.</span>在被激活的组件里调用 beforeRouteEnter。</span><br><span class="line"><span class="number">8.</span>调用全局的 beforeResolve 守卫 (<span class="number">2.5</span>+)。</span><br><span class="line"><span class="number">9.</span>导航被确认。</span><br><span class="line"><span class="number">10.</span>调用全局的 afterEach 钩子。</span><br><span class="line"><span class="number">11.</span>触发 DOM 更新。</span><br><span class="line"><span class="number">12.</span>用创建好的实例调用 beforeRouteEnter 守卫中传给 next 的回调函数。</span><br></pre></td></tr></table></figure><ol start="7"><li>按顺序执行好导航守卫后，就会执行传入的成功的回调函数,从而对_route进行赋值，触发setter，从而使组件重新渲染</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// confirmTransition 的成功回调</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.updateRoute(route)</span><br><span class="line">    onComplete &amp;&amp; onComplete(route)</span><br><span class="line">    <span class="keyword">this</span>.ensureURL()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// fire ready cbs once</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.ready) &#123;</span><br><span class="line">      <span class="keyword">this</span>.ready = <span class="literal">true</span></span><br><span class="line">      <span class="keyword">this</span>.readyCbs.forEach(<span class="function"><span class="params">cb</span> =&gt;</span> &#123;</span><br><span class="line">        cb(route)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新 router</span></span><br><span class="line">updateRoute (route: Route) &#123;</span><br><span class="line">    <span class="keyword">const</span> prev = <span class="keyword">this</span>.current</span><br><span class="line">    <span class="keyword">this</span>.current = route</span><br><span class="line">    <span class="keyword">this</span>.cb &amp;&amp; <span class="keyword">this</span>.cb(route)</span><br><span class="line">    <span class="keyword">this</span>.router.afterHooks.forEach(<span class="function"><span class="params">hook</span> =&gt;</span> &#123; <span class="comment">// 触发全局afterEach守卫</span></span><br><span class="line">      hook &amp;&amp; hook(route, prev)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="8"><li>this.$router.push， this.$router.replace， router-link，都会执行transitionTo，history.go()等，又会触发popstate或者hashchange而后在执行transitionTo</li><li>里面细节很多，就不一一说了</li></ol><p>总体流程图<br><img src="https://liliuzhu.github.io/CDN//images/blog/2020/vue-router_flow_chart.jpg" alt="image"></p><h2 id="vue-router的优缺点"><a href="#vue-router的优缺点" class="headerlink" title="vue-router的优缺点"></a>vue-router的优缺点</h2><p>优点：</p><ol><li>良好的交互体验,用户不需要刷新页面,页面显示流畅；</li><li>良好的前后端工作分离模式,减轻服务器压力,</li><li>完全的前端组件化，便于修改和调整</li></ol><p>缺点：</p><ol><li>首次加载大量资源，要在一个页面上为用户提供产品的所有功能，在这个页面加载的时候，首先要加载大量的静态资源，这个加载时间相对比较长；</li><li>不利于 SEO，单页页面，数据在前端渲染，就意味着没有SEO，或者需要使用变通的方案。</li></ol><h2 id="个人对vue-router-目前遇到的问题"><a href="#个人对vue-router-目前遇到的问题" class="headerlink" title="个人对vue-router 目前遇到的问题"></a>个人对vue-router 目前遇到的问题</h2><p>confirmTransition 这个高阶函数一层套一层，绕不过来具体看源码’src/history/base.js’</p><p>异步组件的加载原理</p><blockquote><p>本文首发于个人技术博客 <a href="https://liliuzhu.gitee.io/blog">https://liliuzhu.gitee.io/blog</a></p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Nov 03 2020 20:10:34 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;这是很久之前的我们业务组内部的一个分享，一直没有更新发布了。乘此再复习一遍&lt;/p&gt;&lt;h2 id=&quot;vue-router-是什么&quot;&gt;&lt;a href=&quot;#vue-router-是什么&quot; class=&quot;headerlink&quot; title=&quot;vue-router  是什么&quot;&gt;&lt;/a&gt;vue-router 是什么&lt;/h2&gt;&lt;p&gt;首先我们需要知道vue-router是什么，它是干什么的？&lt;/p&gt;&lt;p&gt;这里的路由并不是指我们平时所说的硬件路由器，这里的路由就是SPA（单页应用）的路径管理器。 换句话说，vue-router就是WebApp的链接路径管理系统。&lt;/p&gt;&lt;p&gt;路由是根据不同的url地址展示不同的内容或者页面。前端路由就是把不同路由对应不同的内容或者页面的任务交给前端来做，之前是通过服务端根据url的不同返回不同的页面实现的。&lt;/p&gt;&lt;p&gt;vue-router是Vue.js官方的路由插件，它和vue.js是深度集成的，适合用于构建单页面应用。&lt;br&gt;
    
    </summary>
    
      <category term="原创" scheme="https://liliuzhu.gitee.io/blog/categories/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="前端" scheme="https://liliuzhu.gitee.io/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue" scheme="https://liliuzhu.gitee.io/blog/categories/vue/"/>
    
    
      <category term="vue" scheme="https://liliuzhu.gitee.io/blog/tags/vue/"/>
    
      <category term="vue-router" scheme="https://liliuzhu.gitee.io/blog/tags/vue-router/"/>
    
  </entry>
  
  <entry>
    <title>vue中babel-polyfill的使用方法</title>
    <link href="https://liliuzhu.gitee.io/blog/2019/10/vue_use_babel-polyfill.html"/>
    <id>https://liliuzhu.gitee.io/blog/2019/10/vue_use_babel-polyfill.html</id>
    <published>2019-10-23T16:15:15.000Z</published>
    <updated>2020-11-03T10:38:41.786Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Nov 03 2020 20:10:34 GMT+0800 (GMT+08:00) --><h3 id="为什么使用babel-polyfill"><a href="#为什么使用babel-polyfill" class="headerlink" title="为什么使用babel-polyfill"></a>为什么使用babel-polyfill</h3><p>Babel是一个广泛使用的转码器，可以将ES6代码转为ES5代码，从而可以在现有环境执行，所以我们可以用ES6编写，而不用考虑环境支持的问题。<br><a id="more"></a><br>Babel 默认只转换新的 JavaScript 句法（syntax），而不转换新的 API ，比如 Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise 等全局对象，以及一些定义在全局对象上的方法（比如 Object.assign）都不会转码。Babel 默认不转码的 API 非常多，详细清单可以查看babel-plugin-transform-runtime模块的definitions.js文件。</p><p>有些浏览器版本的发布早于ES6的定稿和发布，因此如果在编程中使用了ES6的新特性，而浏览器没有更新版本，或者新版本中没有对ES6的特性进行兼容，那么浏览器就会无法识别ES6代码，例如IE9根本看不懂代码写的let和const是什么东西？只能选择报错，这就是浏览器对ES6的兼容性问题；</p><p>为了完整使用 ES6 的 API ，我们可以使用 babel-polyfill 这个插件：</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -<span class="built_in">save</span>-<span class="built_in">dev</span> babel-polyfill</span><br></pre></td></tr></table></figure><p>或<br></p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> install --save @babel/polyfill</span><br></pre></td></tr></table></figure><p></p><p>然后，在需要使用的文件的顶部引入<br></p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"babel-polyfill"</span></span><br></pre></td></tr></table></figure><p></p><p>或<br></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">import</span> "@<span class="keyword">babel</span>/<span class="keyword">polyfill</span>";</span><br></pre></td></tr></table></figure><p></p><p>node.js 中：<br></p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'babel-polyfill'</span>);</span><br></pre></td></tr></table></figure><p></p><p>或<br></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">require</span>("@<span class="keyword">babel</span>/<span class="keyword">polyfill</span>");</span><br></pre></td></tr></table></figure><p></p><p>webpack.config.js 中：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span>.<span class="keyword">exports</span> = &#123; </span><br><span class="line">entry: [<span class="string">'babel-polyfill'</span>, <span class="string">'./app/js'</span>] </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>或<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span>.<span class="keyword">exports</span> = &#123;</span><br><span class="line"> entry: [<span class="string">"@babel/polyfill"</span>, <span class="string">"./app/js"</span>],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p></p><h3 id="babel-polyfill的相关优化推荐博客"><a href="#babel-polyfill的相关优化推荐博客" class="headerlink" title="babel-polyfill的相关优化推荐博客"></a>babel-polyfill的相关优化推荐博客</h3><ol><li><a href="https://blog.csdn.net/duola8789/article/details/82984922" target="_blank" rel="noopener">按需加载babel-polyfill</a></li></ol><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ol><li><a href="https://www.babeljs.cn/docs/babel-polyfill" target="_blank" rel="noopener">https://www.babeljs.cn/docs/babel-polyfill</a></li></ol><blockquote><p>本文首发于个人技术博客 <a href="https://liliuzhu.gitee.io/blog">https://liliuzhu.gitee.io/blog</a></p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Nov 03 2020 20:10:34 GMT+0800 (GMT+08:00) --&gt;&lt;h3 id=&quot;为什么使用babel-polyfill&quot;&gt;&lt;a href=&quot;#为什么使用babel-polyfill&quot; class=&quot;headerlink&quot; title=&quot;为什么使用babel-polyfill&quot;&gt;&lt;/a&gt;为什么使用babel-polyfill&lt;/h3&gt;&lt;p&gt;Babel是一个广泛使用的转码器，可以将ES6代码转为ES5代码，从而可以在现有环境执行，所以我们可以用ES6编写，而不用考虑环境支持的问题。&lt;br&gt;
    
    </summary>
    
      <category term="原创" scheme="https://liliuzhu.gitee.io/blog/categories/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="前端" scheme="https://liliuzhu.gitee.io/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue" scheme="https://liliuzhu.gitee.io/blog/categories/vue/"/>
    
    
      <category term="vue" scheme="https://liliuzhu.gitee.io/blog/tags/vue/"/>
    
      <category term="babel" scheme="https://liliuzhu.gitee.io/blog/tags/babel/"/>
    
  </entry>
  
  <entry>
    <title>WebSocket技术分享</title>
    <link href="https://liliuzhu.gitee.io/blog/2019/06/Internal-technology-sharing-WebSocket.html"/>
    <id>https://liliuzhu.gitee.io/blog/2019/06/Internal-technology-sharing-WebSocket.html</id>
    <published>2019-06-27T17:01:07.000Z</published>
    <updated>2020-05-07T09:22:10.501Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Nov 03 2020 20:10:34 GMT+0800 (GMT+08:00) --><p>在正式介绍WebSocket之前先跟大家科普一下以及讨论一下过去是如何实现Web双向通信的</p><h2 id="科普一下通讯传输模式"><a href="#科普一下通讯传输模式" class="headerlink" title="科普一下通讯传输模式"></a>科普一下通讯传输模式</h2><ul><li>单工：只支持数据在一个方向上传输；例如：BP机</li><li>半双工：允许数据在两个方向上传输，但是某一时刻只允许数据在一个方向上传输；例如：对讲机, 电报机</li><li>全双工：同时在两个方向上传输，是两个单工通信的结合，要求发送设备和接收设备同时具有独立的接收和发送能力。 例如：手机</li></ul><a id="more"></a><h2 id="历史回顾"><a href="#历史回顾" class="headerlink" title="历史回顾"></a>历史回顾</h2><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1554892663868&amp;di=70a4e5117385e2aaf276a6819eb7aabe&amp;imgtype=0&amp;src=http%3A%2F%2Fwww.th7.cn%2Fd%2Ffile%2Fp%2F2016%2F04%2F19%2F07950eab0b874e0c84eb7f0167c2bab7.jpg" alt="历史回顾示意图"></p><p>HTTP 协议有一个缺陷：通信只能由客户端发起。举例来说，我们想了解今天的天气，只能是客户端向服务器发出请求，服务器返回查询结果。HTTP 协议做不到服务器主动向客户端推送信息。这种单向请求的特点，注定了如果服务器有连续的状态变化，客户端要获知就非常麻烦。 在WebSocket协议之前，有三种实现双向通信的方式：轮询（polling）、长轮询（long-polling）和iframe流（streaming）。</p><h3 id="轮询（polling）"><a href="#轮询（polling）" class="headerlink" title="轮询（polling）"></a>轮询（polling）</h3><p><img src="http://zuccess.cn/upload/img/20150114/201501140947113792.jpg" alt="轮询示意图"><br><img src="//liliuzhu.github.io/CDN/images/blog/2019/16a10769c0e4d72b.jpg" alt="轮询示意图"></p><p>轮询是客户端和服务器之间会一直进行连接，每隔一段时间就询问一次。其缺点也很明显：连接数会很多，一个接受，一个发送。而且 每次发送请求都会有Http的Header，会很耗流量，也会消耗CPU的利用率 。</p><ul><li>优点：实现简单，无需做过多的更改</li><li>缺点：轮询的间隔过长，会导致用户不能及时接收到更新的数据；轮询的间隔过短，会导致查询请求过多，增加服务器端的负担</li></ul><p><strong>实例</strong></p><p>1.index.html<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--index.html--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/axios@0.18.0/dist/axios.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue@2.6.10/dist/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>polling<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"polling"</span>&gt;</span>http 轮询<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"stopPolling"</span>&gt;</span>停止轮询<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;time&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> vm=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">'#app'</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line"><span class="actionscript">                time: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">                timer: <span class="literal">null</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            mounted() &#123;</span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                polling() &#123;</span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.stopPolling()</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.timer = setInterval(<span class="keyword">this</span>.getTime, <span class="number">1000</span>)</span></span><br><span class="line">                &#125;,</span><br><span class="line">                stopPolling() &#123;</span><br><span class="line"><span class="actionscript">                    clearInterval(<span class="keyword">this</span>.timer)</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.timer = <span class="literal">null</span></span></span><br><span class="line">                &#125;,</span><br><span class="line">                getTime()&#123;</span><br><span class="line"><span class="javascript">                    <span class="built_in">window</span>.axios.get(<span class="string">'/polling'</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">this</span>.time = res.data</span></span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>2.server.js<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">8001</span></span><br><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>), <span class="comment">//引入express模块</span></span><br><span class="line">   app = express(),</span><br><span class="line">   server = <span class="built_in">require</span>(<span class="string">'http'</span>).createServer(app);</span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="string">'static'</span>))); <span class="comment">//指定静态HTML文件的位置</span></span><br><span class="line">app.get(<span class="string">'/polling'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    res.end(<span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleString());</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(port);</span><br><span class="line">server.setTimeout(<span class="number">0</span>);   <span class="comment">//设置不超时，所以服务端不会主动关闭连接</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'server started'</span>, <span class="string">'http://127.0.0.1:'</span> + port);</span><br></pre></td></tr></table></figure><p></p><p>3.效果图<br><img src="//liliuzhu.github.io/CDN/images/blog/2019/websocket-polling.gif" alt="实例效果图"></p><h3 id="长轮询（long-polling）"><a href="#长轮询（long-polling）" class="headerlink" title="长轮询（long-polling）"></a>长轮询（long-polling）</h3><p><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=1472113332,2688476676&amp;fm=26&amp;gp=0.jpg" alt="长轮询示意图"></p><p>长轮询是对轮询的改进版，客户端发送HTTP给服务器之后，看有没有新消息，如果没有新消息，就一直等待。当有新消息的时候，才会返回给客户端。在某种程度上减小了网络带宽和CPU利用率等问题。由于http数据包的头部数据量往往很大（通常有400多个字节），但是真正被服务器需要的数据却很少（有时只有10个字节左右），这样的数据包在网络上周期性的传输，难免 对网络带宽是一种浪费 。</p><ul><li>优点：比 Polling 做了优化，有较好的时效性</li><li>缺点：保持连接会消耗资源; 服务器没有返回有效数据，程序超时。</li></ul><p><strong>实例</strong></p><p>1.index.html<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--index.html--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/axios@0.18.0/dist/axios.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue@2.6.10/dist/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>long-polling<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"longPolling"</span>&gt;</span>http 长轮询<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"stopPolling"</span>&gt;</span>停止轮询<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;time&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> vm=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">'#app'</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line"><span class="actionscript">                time: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">                timer: <span class="literal">null</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                stopPolling() &#123;</span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.timer = <span class="literal">null</span></span></span><br><span class="line">                &#125;,</span><br><span class="line">                longPolling() &#123;</span><br><span class="line"><span class="actionscript">                    <span class="keyword">if</span>(!<span class="keyword">this</span>.timer)&#123;</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">this</span>.timer = <span class="literal">true</span></span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">this</span>.getTime()</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                getTime()&#123;</span><br><span class="line"><span class="javascript">                    <span class="built_in">window</span>.axios.get(<span class="string">'/longPolling'</span>, &#123;<span class="attr">timeout</span>: <span class="number">5000</span>&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">this</span>.time = res.data</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">this</span>.timer &amp;&amp; <span class="keyword">this</span>.getTime()</span></span><br><span class="line"><span class="javascript">                    &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(err)</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">this</span>.timer &amp;&amp; <span class="keyword">this</span>.getTime()</span></span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>2.server.js<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">8001</span></span><br><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>), <span class="comment">//引入express模块</span></span><br><span class="line">   app = express(),</span><br><span class="line">   server = <span class="built_in">require</span>(<span class="string">'http'</span>).createServer(app);</span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="string">'static'</span>))); <span class="comment">//指定静态HTML文件的位置</span></span><br><span class="line">app.get(<span class="string">'/longPolling'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">_</span> =&gt;</span> &#123;</span><br><span class="line">        res.end(<span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleString());</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(port);</span><br><span class="line">server.setTimeout(<span class="number">0</span>);   <span class="comment">//设置不超时，所以服务端不会主动关闭连接</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'server started'</span>, <span class="string">'http://127.0.0.1:'</span> + port);</span><br></pre></td></tr></table></figure><p></p><p>3.效果图<br><img src="//liliuzhu.github.io/CDN/images/blog/2019/websocket-stopPolling.gif" alt="实例效果图"></p><h3 id="长连接"><a href="#长连接" class="headerlink" title="长连接"></a>长连接</h3><p><img src="//liliuzhu.github.io/CDN/images/blog/2019/16a10752c13bb601.jpg" alt="长连接示意图"></p><h4 id="iframe流（streaming）"><a href="#iframe流（streaming）" class="headerlink" title="iframe流（streaming）"></a>iframe流（streaming）</h4><p>iframe流方式是在页面中插入一个隐藏的iframe，利用其src属性在服务器和客户端之间创建一条长连接，服务器向iframe传输数据（通常是HTML，内有负责插入信息的javascript），来实时更新页面。</p><ul><li>优点：消息能够实时到达；浏览器兼容好</li><li>缺点：服务器维护一个长连接会增加开销；非动态设置iframe.srec时IE、chrome、Firefox会显示加载没有完成，图标会不停旋转,见下面两图</li></ul><p><strong>实例</strong></p><p>1.index.html<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--index.html--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>longConnection<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"longConnection()"</span>&gt;</span>http 长连接<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"stopLongConnection()"</span>&gt;</span>关闭长连接<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"longConnection"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">"iframe"</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">style</span>=<span class="string">"display:none"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> iframe = <span class="built_in">document</span>.getElementById(<span class="string">'iframe'</span>)</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">longConnection</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        iframe.src=<span class="string">'/longConnection2'</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(iframe)</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">stopLongConnection</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        iframe.src=<span class="string">'/'</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>2.server.js<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">8001</span></span><br><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>), <span class="comment">//引入express模块</span></span><br><span class="line">   app = express(),</span><br><span class="line">   server = <span class="built_in">require</span>(<span class="string">'http'</span>).createServer(app);</span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="string">'static'</span>))); <span class="comment">//指定静态HTML文件的位置</span></span><br><span class="line">app.get(<span class="string">'/longConnection2'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> longConnectionTimer = <span class="literal">null</span></span><br><span class="line">    clearInterval(longConnectionTimer)</span><br><span class="line">    longConnectionTimer = setInterval(<span class="function"><span class="params">_</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (res.socket._handle) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'longConnection2-'</span> + count++)</span><br><span class="line">            <span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleString()</span><br><span class="line">            res.write(<span class="string">`</span></span><br><span class="line"><span class="string">           &lt;script type="text/javascript"&gt;</span></span><br><span class="line"><span class="string">             parent.document.getElementById('longConnection').innerHTML = "<span class="subst">$&#123;date&#125;</span>";//改变父窗口dom元素</span></span><br><span class="line"><span class="string">           &lt;/script&gt;</span></span><br><span class="line"><span class="string">         `</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'longConnection2-stop'</span>)</span><br><span class="line">            clearInterval(longConnectionTimer)</span><br><span class="line">            longConnectionTimer = <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(port);</span><br><span class="line">server.setTimeout(<span class="number">0</span>);   <span class="comment">//设置不超时，所以服务端不会主动关闭连接</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'server started'</span>, <span class="string">'http://127.0.0.1:'</span> + port);</span><br></pre></td></tr></table></figure><p></p><p>3.效果图<br><img src="//liliuzhu.github.io/CDN/images/blog/2019/websocket-longConnection2-3.gif" alt="实例效果图1"><br><img src="//liliuzhu.github.io/CDN/images/blog/2019/websocket-longConnection2.gif" alt="实例效果图2"></p><h4 id="事件流-EventSource（SSE-Server-Sent-Events，不能算作历史技术，属于H5范围）"><a href="#事件流-EventSource（SSE-Server-Sent-Events，不能算作历史技术，属于H5范围）" class="headerlink" title="事件流 EventSource（SSE - Server-Sent Events，不能算作历史技术，属于H5范围）"></a>事件流 EventSource（SSE - Server-Sent Events，不能算作历史技术，属于H5范围）</h4><p>EventSource的官方名称应该是Server-sent events (SSE)服务端派发事件，EventSource 基于http协议只是简单的单项通信，实现了服务端推的过程客户端无法通过EventSource向服务端发送数据。虽然不能实现双向通信但是在功能设计上他也有一些优点比如可以自动重连接,event-IDs,以及发送随机事件的能力（WebSocket要借助第三方库比如socket.io可以实现重连。）<br><strong>实例</strong></p><p>1.index.html<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--index.html--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue@2.6.10/dist/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>polling<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"longConnection"</span>&gt;</span>http 长连接<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"stopLongConnection"</span>&gt;</span>关闭长连接<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;time&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> vm=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">'#app'</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line"><span class="actionscript">                time: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">                eventSource: <span class="literal">null</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                stopLongConnection() &#123;</span><br><span class="line"><span class="actionscript">                   <span class="keyword">this</span>.close()</span></span><br><span class="line">                &#125;,</span><br><span class="line">                longConnection() &#123;</span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.getTime()</span></span><br><span class="line">                &#125;,</span><br><span class="line">                getTime()&#123;</span><br><span class="line"><span class="actionscript">                    <span class="comment">// 实例化 EventSource 对象，并指定一个 URL 地址</span></span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.eventSource = <span class="keyword">new</span> EventSource(<span class="string">'/longConnection'</span>); <span class="comment">// 使用 addEventListener() 方法监听事件</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">"当前状态0"</span>, <span class="keyword">this</span>.eventSource.readyState);</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.eventSource.onopen = <span class="keyword">this</span>.onopen</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.eventSource.onmessage = <span class="keyword">this</span>.onmessage</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.eventSource.onerror = <span class="keyword">this</span>.onerror</span></span><br><span class="line">                &#125;,</span><br><span class="line">                onopen()&#123;</span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">"链接成功."</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">"当前状态1"</span>, <span class="keyword">this</span>.eventSource.readyState);</span></span><br><span class="line">                &#125;,</span><br><span class="line">                onmessage(res)&#123;</span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.time = res.data</span></span><br><span class="line">                &#125;,</span><br><span class="line">                onerror(err)&#123;</span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(err)</span></span><br><span class="line">                &#125;,</span><br><span class="line">                close()&#123;</span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.eventSource &amp;&amp; <span class="keyword">this</span>.eventSource.close()</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">"当前状态2"</span>, <span class="keyword">this</span>.eventSource.readyState);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>2.server.js<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">8001</span></span><br><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>), <span class="comment">//引入express模块</span></span><br><span class="line">   app = express(),</span><br><span class="line">   server = <span class="built_in">require</span>(<span class="string">'http'</span>).createServer(app);</span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="string">'static'</span>))); <span class="comment">//指定静态HTML文件的位置</span></span><br><span class="line">app.get(<span class="string">'/longConnection'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> longConnectionTimer = <span class="literal">null</span></span><br><span class="line">    clearInterval(longConnectionTimer)</span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">"text/event-stream"</span>,</span><br><span class="line">        <span class="string">'Cache-Control'</span>: <span class="string">'no-cache'</span>,</span><br><span class="line">        <span class="string">'Connection'</span>: <span class="string">'keep-alive'</span></span><br><span class="line">    &#125;)</span><br><span class="line">    longConnectionTimer = setInterval(<span class="function"><span class="params">_</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(res.socket._handle)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'longConnection-'</span> + count++)</span><br><span class="line">            <span class="keyword">const</span> data = &#123; <span class="attr">timeStamp</span>: <span class="built_in">Date</span>.now() &#125;;</span><br><span class="line">            res.write(<span class="string">`data: <span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleString()&#125;</span>\n\n`</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'longConnection-stop'</span>)</span><br><span class="line">            clearInterval(longConnectionTimer)</span><br><span class="line">            longConnectionTimer = <span class="literal">null</span></span><br><span class="line">            res.end(<span class="string">'stop'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(port);</span><br><span class="line">server.setTimeout(<span class="number">0</span>);   <span class="comment">//设置不超时，所以服务端不会主动关闭连接</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'server started'</span>, <span class="string">'http://127.0.0.1:'</span> + port);</span><br></pre></td></tr></table></figure><p></p><p>3.效果图<br><img src="//liliuzhu.github.io/CDN/images/blog/2019/websocket-longConnection.gif" alt="实例效果图"></p><p><strong>有什么用</strong>：<br>因为受单项通信的限制EventSource非常适应于后端数据更新频繁且对实时性要求较高而又不需要客户端向服务端通信的场景下。比如来实现像股票报价、新闻推送、实时天气这些只需要服务器发送消息给客户端场景中。EventSource的使用更加便捷这也是他的优点。</p><p>EventSource的应用，webpack-hot-middleware原理</p><ul><li>优点<ol><li>基于现有http协议，实现简单</li><li>断开后自动重联，并可设置重联超时</li><li>派发任意事件</li><li>跨域并有相应的安全过滤</li></ol></li><li>缺点<ol><li>只能单向通信，服务器端向客户端推送事件</li><li>事件流协议只能传输UTF-8数据，不支持二进制流。</li><li>兼容性不高，IE 和 Edge 下目前所有不支持EventSource</li><li>服务器端需要保持 HTTP 连接，消耗一定的资源</li></ol></li></ul><p>EventSource实例的readyState属性，表明连接的当前状态。该属性只读，可以取以下值。</p><ul><li>0：相当于常量EventSource.CONNECTING，表示连接还未建立，或者断线正在重连。</li><li>1：相当于常量EventSource.OPEN，表示连接已经建立，可以接受数据。</li><li>2：相当于常量EventSource.CLOSED，表示连接已断，且不会重连。</li></ul><p><strong>注意:</strong></p><ol><li>EventSource是一种服务端推送技术。</li><li>一般来说，网页都是通过发送请求从服务端获取数据，而服务端推送技术 使服务器随时可以向客户端发送数据。</li><li>EventSource基于http长链接<ul><li>客户端需要创建一个EventSource对象，服务端URI为参数</li><li>服务端返回的响应报文的Content-Type须为text/event-stream。</li></ul></li></ol><h3 id="Flash-Socket"><a href="#Flash-Socket" class="headerlink" title="Flash Socket"></a>Flash Socket</h3><p>在页面中内嵌入一个使用了Socket类的Flash程序JavaScript通过调用此Flash程序提供的Socket接口与服务器端的Socket接口进行通信，JavaScript在收到服务器端传送的信息后控制页面的显示。</p><ul><li>优点：实现真正的即时通信，而不是伪即时。</li><li>缺点：客户端必须安装Flash插件；非HTTP协议，无法自动穿越防火墙。</li><li>实例：网络互动游戏。</li></ul><p>==<strong>Flash 不懂也不说太多了，再多说都是瞎编了</strong>==</p><p>以上demo源码地址：<a href="https://github.com/liliuzhu/personalShareDemo/tree/master/WebSocket/polling" target="_blank" rel="noopener">https://github.com/liliuzhu/personalShareDemo/tree/master/WebSocket/polling</a></p><h2 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h2><p>WebSocket是HTML5开始提供的一种在单个TCP连接上进行全双工通讯的协议。</p><p>WebSocket使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在WebSocket API中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。</p><p>在WebSocket API中，浏览器和服务器只需要做一个握手的动作，然后，浏览器和服务器之间就形成了一条快速通道。两者之间就直接可以数据互相传送。</p><p>HTML5 定义的 WebSocket协议，能更好的节省服务器资源和带宽，并且能够更实时地进行通讯；解决了轮询以及其他长连接的很多缺点。<br><img src="http://www.runoob.com/wp-content/uploads/2016/03/ws.png" alt="对比示意图"></p><h3 id="如何使用-WebSocket"><a href="#如何使用-WebSocket" class="headerlink" title="如何使用 WebSocket"></a>如何使用 WebSocket</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// WebSocket的客户端原生api</span></span><br><span class="line"><span class="keyword">var</span> Socket = <span class="keyword">new</span> WebSocket(<span class="string">'ws://localhost:8080'</span>) <span class="comment">// WebSocket 对象作为一个构造函数，用于新建 WebSocket 实例。</span></span><br><span class="line">Socket.onopen = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125; <span class="comment">// 连接建立时触发</span></span><br><span class="line">Socket.onclose = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;  <span class="comment">// 连接关闭时触发</span></span><br><span class="line">Socket.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125; <span class="comment">// 客户端接收服务端数据时触发</span></span><br><span class="line">Socket.send(<span class="string">'data'</span>) <span class="comment">// 实例对象的send()方法用于向服务器发送数据</span></span><br><span class="line">Socket.close() <span class="comment">// 关闭连接</span></span><br><span class="line">socket.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125; <span class="comment">// 通信发生错误时触发</span></span><br></pre></td></tr></table></figure><p>Socket.readyState 表示连接状态，可以是以下值</p><ul><li>0 - 表示连接尚未建立。</li><li>1 - 表示连接已建立，可以进行通信。</li><li>2 - 表示连接正在进行关闭。</li><li>3 - 表示连接已经关闭或者连接不能打开。</li></ul><p><strong>注意：</strong><br>Websocket 使用ws或wss的统一资源标志符，类似于HTTPS，其中wss表示在TLS之上的Websocket</p><p>Websocket 使用和HTTP相同的TCP端口，可以绕过大多数防火墙的限制。默认情况下，Websocket 协议使用 80 端口；运行在 TLS 之上时，默认使用 443 端口。</p><p>虽然 WebSocketServer 可以使用别的端口，但是统一端口还是更优的选择</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 服务器数据可能是文本，也可能是二进制数据（blob对象或Arraybuffer对象）。</span></span><br><span class="line">ws.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> event.data === <span class="built_in">String</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Received data string"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(event.data <span class="keyword">instanceof</span> <span class="built_in">ArrayBuffer</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> buffer = event.data;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Received arraybuffer"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 除了动态判断收到的数据类型，也可以使用binaryType属性，显式指定收到的二进制数据类型。</span></span><br><span class="line"><span class="comment">// 收到的是 blob 数据</span></span><br><span class="line">ws.binaryType = <span class="string">"blob"</span>;</span><br><span class="line">ws.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e.data.size);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 收到的是 ArrayBuffer 数据</span></span><br><span class="line">ws.binaryType = <span class="string">"arraybuffer"</span>;</span><br><span class="line">ws.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e.data.byteLength);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送 Blob 对象的例子。</span></span><br><span class="line"><span class="keyword">var</span> file = <span class="built_in">document</span></span><br><span class="line">  .querySelector(<span class="string">'input[type="file"]'</span>)</span><br><span class="line">  .files[<span class="number">0</span>];</span><br><span class="line">ws.send(file);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送 ArrayBuffer 对象的例子。</span></span><br><span class="line"><span class="comment">// Sending canvas ImageData as ArrayBuffer</span></span><br><span class="line"><span class="keyword">var</span> img = canvas_context.getImageData(<span class="number">0</span>, <span class="number">0</span>, <span class="number">400</span>, <span class="number">320</span>);</span><br><span class="line"><span class="keyword">var</span> binary = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(img.data.length);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; img.data.length; i++) &#123;</span><br><span class="line">  binary[i] = img.data[i];</span><br><span class="line">&#125;</span><br><span class="line">ws.send(binary.buffer);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例对象的bufferedAmount属性，表示还有多少字节的二进制数据没有发送出去。它可以用来判断发送是否结束。</span></span><br><span class="line"><span class="keyword">var</span> data = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">10000000</span>);</span><br><span class="line">socket.send(data);</span><br><span class="line"><span class="keyword">if</span> (socket.bufferedAmount === <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="comment">// 发送完毕</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 发送还没结束</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="WebSocket-amp-EventSource-的区别"><a href="#WebSocket-amp-EventSource-的区别" class="headerlink" title="WebSocket &amp; EventSource 的区别"></a>WebSocket &amp; EventSource 的区别</h4><p>EventSource和WebSocket一样都是HTML5中的新技术,不过两者在定位上有很大的差别。</p><ol><li>WebSocket基于TCP协议，EventSource基于http协议。</li><li>EventSource是单向通信，而websocket是双向通信。</li><li>EventSource只能发送文本，而websocket支持发送二进制数据。</li><li>在实现上EventSource比websocket更简单。</li><li>EventSource有自动重连接（不借助第三方）以及发送随机事件的能力。</li><li>websocket的资源占用过大EventSource更轻量。</li><li>websocket可以跨域，EventSource基于http跨域需要服务端设置请求头。</li></ol><p>WebSocket 协议本质上是一个基于 TCP 的协议。</p><p>为了建立一个 WebSocket连接，客户端浏览器首先要向服务器发起一个HTTP请求，这个请求和通常的HTTP请求不同，包含了一些附加头信息，其中附加头信息”Upgrade:WebSocket”表明这是一个申请协议升级的 HTTP 请求，服务器端解析这些附加的头信息然后产生应答信息返回给客户端，客户端和服务器端的 WebSocket 连接就建立起来了，双方就可以通过这个连接通道自由的传递信息，并且这个连接会持续存在直到客户端或者服务器端的某一方主动的关闭连接。</p><p>Websocket 其实是一个新协议，跟HTTP协议基本没有关系，只是为了兼容现有浏览器的握手规范而已，也就是说它是 HTTP 协议上的一种补充。</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017051503.jpg" alt="说明示意图"></p><p>废话不说上案例<br><img src="//liliuzhu.github.io/CDN/images/blog/2019/websocket-chat.gif" alt="demo效果图"><br>以上demo源码地址： <a href="https://github.com/liliuzhu/personalShareDemo/tree/master/WebSocket/webSocket" target="_blank" rel="noopener">https://github.com/liliuzhu/personalShareDemo/tree/master/WebSocket/webSocket</a></p><h3 id="Web-实时推送技术的比较"><a href="#Web-实时推送技术的比较" class="headerlink" title="Web 实时推送技术的比较"></a>Web 实时推送技术的比较</h3><table><thead><tr><th>方式</th><th>类型</th><th>技术实现</th><th>优点</th><th>缺点</th><th>适用场景</th></tr></thead><tbody><tr><td>轮询Polling</td><td>client⇌server</td><td>客户端循环请求</td><td>1、实现简单 2、 支持跨域</td><td>1、浪费带宽和服务器资源 2、 一次请求信息大半是无用（完整http头信息） 3、有延迟 4、大部分无效请求</td><td>适于小型应用</td></tr><tr><td>长轮询Long-Polling</td><td>client⇌server</td><td>服务器hold住连接，一直到有数据或者超时才返回，减少重复请求次数</td><td>1、实现简单 2、不会频繁发请求 3、节省流量 4、延迟低</td><td>1、服务器hold住连接，会消耗资源 2、一次请求信息大半是无用</td><td>WebQQ、Hi网页版、Facebook IM</td></tr><tr><td>长连接iframe</td><td>server⇌client</td><td>在页面里嵌入一个隐蔵iframe，将这个 iframe 的 src 属性设为对一个长连接的请求，服务器端就能源源不断地往客户端输入数据。</td><td>1、数据实时送达 2、不发无用请求，一次链接，多次“推送”</td><td>1、服务器增加开销 2、无法准确知道连接状态 3、IE、chrome等一直会处于loading状态</td><td>Gmail聊天</td></tr><tr><td>EventSource</td><td>server→client</td><td>new EventSource()</td><td>1、基于现有http协议，实现简单2、断开后自动重联，并可设置重联超时3、派发任意事件4、跨域并有相应的安全过滤</td><td>1、只能单向通信，服务器端向客户端推送事件2、事件流协议只能传输UTF-8数据，不支持二进制流。4、兼容性不高，IE 和 Edge下目前所有不支持EventSource服务器端需要保持 HTTP 连接，消耗一定的资源</td><td>股票报价、新闻推送、实时天气</td><td></td></tr><tr><td>WebSocket</td><td>server⇌client</td><td>new WebSocket()</td><td>1、支持双向通信，实时性更强 2、可发送二进制文件3、减少通信量</td><td>1、浏览器支持程度不一致 2、不支持断开重连</td><td>网络游戏、银行交互和支付</td></tr></tbody></table><p>综上所述：Websocket协议不仅解决了HTTP协议中服务端的被动性，即通信只能由客户端发起，也解决了数据同步有延迟的问题，同时还带来了明显的性能优势，所以websocket是Web 实时推送技术的比较理想的方案，但如果要兼容低版本浏览器，可以考虑用轮询来实现。</p><h3 id="服务端的WebSocket"><a href="#服务端的WebSocket" class="headerlink" title="服务端的WebSocket"></a>服务端的WebSocket</h3><p>npm上有很多包对websocket做了实现比如 socket.io、WebSocket-Node、ws、nodejs-websocket还有很多</p><ol><li><p>Socket.io：<br>Socket.io是一个WebSocket库，包括了客户端的js和服务器端的nodejs，它会自动根据浏览器从WebSocket、AJAX长轮询、Iframe流等等各种方式中选择最佳的方式来实现网络实时应用（不支持WebSocket的情况会降级到AJAX轮询），非常方便和人性化，兼容性非常好，支持的浏览器最低达IE5.5。屏蔽了细节差异和兼容性问题，实现了跨浏览器/跨设备进行双向数据通信。</p></li><li><p>ws：<br>不像 socket.io 模块，ws是一个单纯的websocket模块，不提供向上兼容，不需要在客户端挂额外的js文件。在客户端不需要使用二次封装的api使用浏览器的原生Websocket API即可通信。</p></li></ol><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li><a href="https://blog.csdn.net/yhb241/article/details/79713830" target="_blank" rel="noopener">https://blog.csdn.net/yhb241/article/details/79713830</a></li><li><a href="https://www.tuicool.com/articles/FFFrUvy" target="_blank" rel="noopener">https://www.tuicool.com/articles/FFFrUvy</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Server-sent_events/EventSource" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Server-sent_events/EventSource</a></li><li><a href="https://www.jianshu.com/p/958eba34a5da" target="_blank" rel="noopener">https://www.jianshu.com/p/958eba34a5da</a></li><li><a href="http://www.runoob.com/html/html5-websocket.html" target="_blank" rel="noopener">http://www.runoob.com/html/html5-websocket.html</a></li></ol><blockquote><p>本文首发于个人技术博客 <a href="https://liliuzhu.gitee.io/blog">https://liliuzhu.gitee.io/blog</a></p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Nov 03 2020 20:10:34 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;在正式介绍WebSocket之前先跟大家科普一下以及讨论一下过去是如何实现Web双向通信的&lt;/p&gt;&lt;h2 id=&quot;科普一下通讯传输模式&quot;&gt;&lt;a href=&quot;#科普一下通讯传输模式&quot; class=&quot;headerlink&quot; title=&quot;科普一下通讯传输模式&quot;&gt;&lt;/a&gt;科普一下通讯传输模式&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;单工：只支持数据在一个方向上传输；例如：BP机&lt;/li&gt;&lt;li&gt;半双工：允许数据在两个方向上传输，但是某一时刻只允许数据在一个方向上传输；例如：对讲机, 电报机&lt;/li&gt;&lt;li&gt;全双工：同时在两个方向上传输，是两个单工通信的结合，要求发送设备和接收设备同时具有独立的接收和发送能力。 例如：手机&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="原创" scheme="https://liliuzhu.gitee.io/blog/categories/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="前端" scheme="https://liliuzhu.gitee.io/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="HTML5" scheme="https://liliuzhu.gitee.io/blog/categories/HTML5/"/>
    
    
      <category term="WebSocket" scheme="https://liliuzhu.gitee.io/blog/tags/WebSocket/"/>
    
      <category term="js" scheme="https://liliuzhu.gitee.io/blog/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript实现经典排序算法</title>
    <link href="https://liliuzhu.gitee.io/blog/2019/04/JS-classicic-sorting-algorithms.html"/>
    <id>https://liliuzhu.gitee.io/blog/2019/04/JS-classicic-sorting-algorithms.html</id>
    <published>2019-04-08T14:49:34.000Z</published>
    <updated>2020-05-07T09:22:10.473Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Nov 03 2020 20:10:34 GMT+0800 (GMT+08:00) --><p>先看一下各个算法的时间复杂度和空间复杂度<br><strong>说明：</strong><br>时间复杂度：指的是一个算法执行所耗费的时间<br>空间复杂度指：运行完一个程序所需内存的大小<br>稳定指：如果a=b,a在b的前面，排序后a仍然在b的前面<br>不稳定指：如果a=b，a在b的前面，排序后可能会交换位置</p><a id="more"></a><p>下面主要通过文字和动图介绍冒泡排序、选择排序、快速排序和插入排序这些经典的排序算法，并用js代码实现</p><h4 id="1-冒泡排序（Bubble-Sort）"><a href="#1-冒泡排序（Bubble-Sort）" class="headerlink" title="1. 冒泡排序（Bubble Sort）"></a>1. 冒泡排序（Bubble Sort）</h4><p>冒泡排序可谓是最经典的排序算法了，它是基于比较的排序算法，其优点是实现简单，排序数量较小时性能较好。<br>它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。</p><h5 id="1-1-算法原理"><a href="#1-1-算法原理" class="headerlink" title="1. 1 算法原理"></a>1. 1 算法原理</h5><p>相邻的数据进行两两比较，小数放在前面，大数放在后面，如果前面的数据比后面的数据大，就交换这两个数的位置。也可以实现大数放在前面，小数放在后面，如果前面的数据比后面的小，就交换两个的位置。要实现上述规则需要用到两层for循环。</p><h5 id="1-2-算法描述"><a href="#1-2-算法描述" class="headerlink" title="1. 2 算法描述"></a>1. 2 算法描述</h5><ol><li>比较相邻的元素。如果第一个比第二个大，就交换它们两个；</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数；</li><li>针对所有的元素重复以上的步骤，除了最后一个；</li><li>重复步骤1~3，直到排序完成。</li></ol><h5 id="1-3-动图演示"><a href="#1-3-动图演示" class="headerlink" title="1. 3 动图演示"></a>1. 3 动图演示</h5><p><img src="//liliuzhu.github.io/CDN/images/blog/2019/1867034-e19840224b331fae.gif" alt="image"></p><h5 id="1-4-js代码实现"><a href="#1-4-js代码实现" class="headerlink" title="1. 4 js代码实现"></a>1. 4 js代码实现</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> len = arr.length;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123; <span class="comment">// 相邻元素两两对比</span></span><br><span class="line">      <span class="comment">// 元素交换</span></span><br><span class="line">      <span class="comment">/** 1.使用中间变量 **/</span> </span><br><span class="line">        <span class="keyword">var</span> temp = arr[j + <span class="number">1</span>]; </span><br><span class="line">        arr[j + <span class="number">1</span>] = arr[j]</span><br><span class="line">        arr[j] = temp</span><br><span class="line">        <span class="comment">/** 2.适用纯数字的数组排序 **/</span></span><br><span class="line">        arr[j] = arr[j] +  arr[j + <span class="number">1</span>]</span><br><span class="line">        arr[j + <span class="number">1</span>] =  arr[j] - arr[j + <span class="number">1</span>]</span><br><span class="line">        arr[j] -= arr[j + <span class="number">1</span>]</span><br><span class="line">        <span class="comment">/** 3.使用es6解构赋值 **/</span></span><br><span class="line">        [arr[j], arr[j + <span class="number">1</span>]] = [arr[j + <span class="number">1</span>], arr[j]]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>冒泡排序算法优化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> len = arr.length;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> exchange=<span class="literal">false</span>; <span class="comment">// 交换标志 </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123; <span class="comment">// 相邻元素两两对比</span></span><br><span class="line">        [arr[j], arr[j + <span class="number">1</span>]] = [arr[j + <span class="number">1</span>], arr[j]] <span class="comment">// 元素交换</span></span><br><span class="line">        exchange=<span class="literal">true</span>; <span class="comment">//</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!exchange)&#123; <span class="comment">// 若本趟排序未发生交换，提前终止算法</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-选择排序（Selection-Sort）"><a href="#2-选择排序（Selection-Sort）" class="headerlink" title="2. 选择排序（Selection Sort）"></a>2. 选择排序（Selection Sort）</h4><p>表现最稳定的排序算法之一，因为无论什么数据进去都是O(n²)的时间复杂度。。。所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。</p><h5 id="2-1-算法原理"><a href="#2-1-算法原理" class="headerlink" title="2. 1 算法原理"></a>2. 1 算法原理</h5><p>先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p><h5 id="2-2-算法描述"><a href="#2-2-算法描述" class="headerlink" title="2. 2 算法描述"></a>2. 2 算法描述</h5><p>n个记录的直接选择排序可经过n-1趟直接选择排序得到有序结果。具体算法描述如下：</p><ol><li>初始状态：无序区为R[1..n]，有序区为空；</li><li>第i趟排序(i=1,2,3…n-1)开始时，当前有序区和无序区分别为R[1..i-1]和R(i..n）。该趟排序从当前无序区中-选出关键字最小的记录R[k]，将它与无序区的第1个记录R交换，使R[1..i]和R[i+..n)分别变为记录个数增加1个的新有序区和记录个数减少1个的新无序区；</li><li>n-1趟结束，数组有序化了。</li></ol><h5 id="2-3-动图演示"><a href="#2-3-动图演示" class="headerlink" title="2. 3 动图演示"></a>2. 3 动图演示</h5><p><img src="//liliuzhu.github.io/CDN/images/blog/2019/1867034-c6cc220cfb2b9ac8.gif" alt="image"></p><h5 id="2-4-js代码实现"><a href="#2-4-js代码实现" class="headerlink" title="2. 4 js代码实现"></a>2. 4 js代码实现</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectionSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> len = arr.length;</span><br><span class="line">    <span class="keyword">var</span> minIndex, temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        minIndex = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt; arr[minIndex]) &#123;     <span class="comment">//寻找最小的数</span></span><br><span class="line">                minIndex = j;                 <span class="comment">//将最小数的索引保存</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        temp = arr[i];</span><br><span class="line">        arr[i] = arr[minIndex];</span><br><span class="line">        arr[minIndex] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-插入排序（Insertion-Sort）"><a href="#3-插入排序（Insertion-Sort）" class="headerlink" title="3. 插入排序（Insertion Sort）"></a>3. 插入排序（Insertion Sort）</h4><p>插入排序（Insertion-Sort）的算法描述是一种简单直观的排序算法。</p><h5 id="3-1-算法原理"><a href="#3-1-算法原理" class="headerlink" title="3. 1 算法原理"></a>3. 1 算法原理</h5><p>它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</p><h5 id="3-2-算法描述"><a href="#3-2-算法描述" class="headerlink" title="3. 2 算法描述"></a>3. 2 算法描述</h5><p>一般来说，插入排序都采用in-place在数组上实现。具体算法描述如下：</p><ol><li>从第一个元素开始，该元素可以认为已经被排序；</li><li>取出下一个元素，在已经排序的元素序列中从后向前扫描；</li><li>如果该元素（已排序）大于新元素，将该元素移到下一位置；</li><li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置；</li><li>将新元素插入到该位置后；</li><li>重复步骤2~5。</li></ol><h5 id="3-3-动图演示"><a href="#3-3-动图演示" class="headerlink" title="3. 3 动图演示"></a>3. 3 动图演示</h5><p><img src="//liliuzhu.github.io/CDN/images/blog/2019/1867034-d1537e355abdd298.gif" alt="image"></p><h5 id="3-4-js代码实现"><a href="#3-4-js代码实现" class="headerlink" title="3. 4 js代码实现"></a>3. 4 js代码实现</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 从1位置开始遍历arr中每元素，同时声明空变量temp</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &lt; arr[i - <span class="number">1</span>]) &#123; <span class="comment">// 如果当前元素&lt;前一个元素</span></span><br><span class="line">      <span class="keyword">let</span> temp = arr[i] <span class="comment">// 将当前元素值临时保存在temp中</span></span><br><span class="line">      <span class="keyword">let</span> p = i - <span class="number">1</span> <span class="comment">// 定义变量 p = i- 1</span></span><br><span class="line">      <span class="comment">// 循环 条件：</span></span><br><span class="line">      <span class="comment">// 1. p&gt;=0且temp小于p位置的元素</span></span><br><span class="line">      <span class="keyword">while</span> (p &gt;= <span class="number">0</span> &amp;&amp; temp &lt; arr[p]) &#123;</span><br><span class="line">        <span class="comment">// 循环体： 将P位置的值赋值给p的后一个元素</span></span><br><span class="line">        arr[p + <span class="number">1</span>] = arr[p]</span><br><span class="line">        p-- <span class="comment">// p向前移动一个</span></span><br><span class="line">      &#125;</span><br><span class="line">      arr[p + <span class="number">1</span>] = temp <span class="comment">// 将temp的值赋值给p+1位置的元素</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-快速排序（Selection-Sort）"><a href="#4-快速排序（Selection-Sort）" class="headerlink" title="4. 快速排序（Selection Sort）"></a>4. 快速排序（Selection Sort）</h4><p>快速排序是由东尼·霍尔所发展的一种排序算法。在平均状况下，排序 n 个项目要 Ο(nlogn) 次比较。在最坏状况下则需要 Ο(n2) 次比较，但这种状况并不常见。事实上，快速排序通常明显比其他 Ο(nlogn) 算法更快，因为它的内部循环（inner loop）可以在大部分的架构上很有效率地被实现出来。</p><h5 id="4-1-算法原理"><a href="#4-1-算法原理" class="headerlink" title="4. 1 算法原理"></a>4. 1 算法原理</h5><p>快速排序又是一种分而治之思想在排序算法上的典型应用。本质上来看，快速排序应该算是在冒泡排序基础上的递归分治法。</p><h5 id="4-2-算法描述"><a href="#4-2-算法描述" class="headerlink" title="4. 2 算法描述"></a>4. 2 算法描述</h5><ol><li>选基准：在数据结构中选择一个元素作为基准(pivot</li><li>划分区：参照基准元素值的大小，划分无序区，所有小于基准元素的数据放入一个区间，所有大于基准元素的数据放入另一区间，分区操作结束后，基准元素所处的位置就是最终排序后它应该所处的位置</li><li>递归：对初次划分出来的两个无序区间，递归调用第 1步和第 2步的算法，直到所有无序区间都只剩下一个元素为止。</li></ol><h5 id="4-3-动图演示"><a href="#4-3-动图演示" class="headerlink" title="4. 3 动图演示"></a>4. 3 动图演示</h5><p><img src="http://img.mp.itc.cn/upload/20170425/f01dd4791d494c29934208c86bf6a3ad_th.gif" alt="image"></p><h5 id="4-4-js代码实现"><a href="#4-4-js代码实现" class="headerlink" title="4. 4 js代码实现"></a>4. 4 js代码实现</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//如果arr.length&lt;=1,则直接返回arr</span></span><br><span class="line">    <span class="keyword">if</span>(arr.length&lt;=<span class="number">1</span>)&#123;<span class="keyword">return</span> arr&#125;</span><br><span class="line">    <span class="comment">// arr的元素个数/2，再下去整，将值保存在pivotIndex中</span></span><br><span class="line">    <span class="keyword">var</span> pivotIndex=<span class="built_in">Math</span>.floor(arr.length/<span class="number">2</span>);</span><br><span class="line">    <span class="comment">// 将arr中pivotIndex位置的元素，保存在变量pivot中</span></span><br><span class="line">    <span class="keyword">var</span> pivot=arr[pivotIndex];</span><br><span class="line">    <span class="comment">//声明空数组left和right</span></span><br><span class="line">    <span class="keyword">var</span> left=[];</span><br><span class="line">    <span class="keyword">var</span> right=[];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;  <span class="comment">// 遍历arr中每个元素</span></span><br><span class="line">        <span class="keyword">if</span>(i !== pivotIndex)&#123; <span class="comment">// 如果i !== pivotIndex</span></span><br><span class="line">            <span class="keyword">if</span>(arr[i]&lt;=pivot)&#123; <span class="comment">// 如果当前元素值&lt;pivot</span></span><br><span class="line">                left.push(arr[i]); <span class="comment">// 就将当前值压入left</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                right.push(arr[i]); <span class="comment">// 就将当前值压入right</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//递归</span></span><br><span class="line">    <span class="keyword">return</span> quickSort(left).concat(pivot, quickSort(right)); <span class="comment">// 链接多个数组到 left 从小到大</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul><li><a href="https://github.com/hustcc/JS-Sorting-Algorithm" target="_blank" rel="noopener">十大经典排序算法</a></li><li><a href="https://www.cnblogs.com/liululin/p/5897059.html" target="_blank" rel="noopener">js排序算法汇总</a></li><li><a href="http://www.sohu.com/a/136157205_671058" target="_blank" rel="noopener">技术面试宝典： 很全面的算法和数据结构知识（含代码实现）下篇</a></li></ul><blockquote><p>本文首发于个人技术博客 <a href="https://liliuzhu.gitee.io/blog">https://liliuzhu.gitee.io/blog</a></p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Nov 03 2020 20:10:34 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;先看一下各个算法的时间复杂度和空间复杂度&lt;br&gt;&lt;strong&gt;说明：&lt;/strong&gt;&lt;br&gt;时间复杂度：指的是一个算法执行所耗费的时间&lt;br&gt;空间复杂度指：运行完一个程序所需内存的大小&lt;br&gt;稳定指：如果a=b,a在b的前面，排序后a仍然在b的前面&lt;br&gt;不稳定指：如果a=b，a在b的前面，排序后可能会交换位置&lt;/p&gt;
    
    </summary>
    
      <category term="原创" scheme="https://liliuzhu.gitee.io/blog/categories/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="前端" scheme="https://liliuzhu.gitee.io/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="算法" scheme="https://liliuzhu.gitee.io/blog/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="JS" scheme="https://liliuzhu.gitee.io/blog/tags/JS/"/>
    
      <category term="排序算法" scheme="https://liliuzhu.gitee.io/blog/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>【基础】利用 hexo + Gitpage 开发自己的博客</title>
    <link href="https://liliuzhu.gitee.io/blog/2019/03/gitpage+hexo_develop_blog.html"/>
    <id>https://liliuzhu.gitee.io/blog/2019/03/gitpage+hexo_develop_blog.html</id>
    <published>2019-03-06T11:52:12.000Z</published>
    <updated>2020-05-07T09:22:10.551Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Nov 03 2020 20:10:34 GMT+0800 (GMT+08:00) --><blockquote><ul><li>原文作者：<a href="https://cherryblog.site" target="_blank" rel="noopener">cherry</a></li><li>原文地址：<a href="https://cherryblog.site/Use-Gitpagehexo-to-develop-their-own-blog.html" target="_blank" rel="noopener">【基础】利用 hexo + Gitpage 开发自己的博客</a></li></ul></blockquote><p>进入程序员这个坑之后就开始自己在网上扒资料，然而资料太多，情况太复杂，主要是看见别人的博客，感觉好高大上，并且感觉在茫茫的互联网有自己的小天地感觉也是极好的。不是为了给别人看，而是为了 记录自己的成长，记录自己的每一个脚印。</p><a id="more"></a><h2 id="Gitpage-hexo"><a href="#Gitpage-hexo" class="headerlink" title="Gitpage+hexo"></a>Gitpage+hexo</h2><p>想要实现拥有一个独立的私有博客，我们需要两个东西，一个是可供浏览器访问的静态网页存储空间，这个我们选择gitPage，一个是一个静态网页生成工具，Octopress也好，Hexo也罢，这里我选择的是Hexo。</p><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><h2 id="1-安装Node"><a href="#1-安装Node" class="headerlink" title="1 安装Node"></a>1 安装Node</h2><p>到Node.js官网下载相应平台的最新版本，一路安装即可。我用的是node-v0.10.22-x86.msi</p><h2 id="2-安装Git"><a href="#2-安装Git" class="headerlink" title="2 安装Git"></a>2 安装Git</h2><p>安装git，或安装github客户端，自我感觉github客户端很好用，界面很友好，同样操作起来也比git好用的多！我用的是window10系统，在官网下载数次都未安装成功，最后在知乎上终于找到安装包，链接: <a href="http://pan.baidu.com/s/1eS2mHxS" target="_blank" rel="noopener">http://pan.baidu.com/s/1eS2mHxS</a> 密码: yatq ，有需要的同学可以点击下载。</p><h1 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h1><h2 id="1-安装Hexo"><a href="#1-安装Hexo" class="headerlink" title="1 安装Hexo"></a>1 安装Hexo</h2><p>使用git shell,依次输入以下代码命令：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> /</span><br><span class="line">npm install hexo-<span class="keyword">cli</span> -<span class="keyword">g</span></span><br></pre></td></tr></table></figure><p>命令解释：</p><p><strong>cd和/之间要有空格</strong>，这条指令的作用是返回根目录，也可以在cd /后加入一个文件名，例如下文要用到的cd /Hexo 就可以指向这个文件夹，再输入代码行就默认在在此文件下执行。</p><h2 id="2-安装博客所需文件"><a href="#2-安装博客所需文件" class="headerlink" title="2 安装博客所需文件"></a>2 安装博客所需文件</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd /</span><br><span class="line">hexo init Hexo</span><br><span class="line">cd /Hexo</span><br><span class="line">npm instal</span><br><span class="line">hexo <span class="keyword">generate</span>（可简写为hexo g）</span><br><span class="line">hexo sever（可简写为hexo s）</span><br></pre></td></tr></table></figure><p>命令解释:</p><ul><li><p>cd /这里返回的根目录取决于你在github客户端的设置，我设置的是F盘，所以返回得也是F盘，所以下面创建的Hexo文件夹也在F盘。</p></li><li><p>Hexo这个文件名可以随便命名，存放的是构建博客所要用到的所有文件。</p></li><li><p>指向Hexo目录</p></li><li><p>安装依赖文件</p></li><li><p>编译</p></li><li><p>开启本地服务(第5、6步的操作可以合并成hexo s -g)</p></li></ul><p>此时打开浏览器，在地址栏输入<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a><br>即可查看博客的原型，是不是看到了胜利的曙光；但是如果“显示无法访问此网站”也不要沮丧，我这步是直接看到页面的，你无法访问的原因可能你没有翻墙，因为页面中默认使用了ajax.google.com 下的js包。</p><p>那么如何翻墙呢？ 下面提供我所知道的两种方法：</p><p>这种方法比较简单，下载安装运行Lantern，可以官网下载的吧！这里提供一下安装包吧，链接: <a href="http://pan.baidu.com/s/1c2x7eRu" target="_blank" rel="noopener">http://pan.baidu.com/s/1c2x7eRu</a><br>密码: z3kw</p><p>这种方法需要修改hosts文件，我的 hosts 文件路径：C:\Windows\System32\drivers\etc ，详细攻略：<a href="http://blog.my-eclipse.cn/host-google.html" target="_blank" rel="noopener">http://blog.my-eclipse.cn/host-google.html</a></p><p>如果你不想翻墙，可以采用这种方法：<br>进入你刚新建好的 blog根目录</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">themes<span class="regexp">/landscape/</span>layout<span class="regexp">/_partial</span></span><br></pre></td></tr></table></figure><p>1，找到 after-footer.ejs把</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;script src="http://cdn.bootcss.com/jquery/2.1.1/jquery.min.js“ &gt;</span> <span class="section">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>替换成</p><blockquote><p><code>&lt;script src=&quot;http://cdn.bootcss.com/jquery/2.1.1/jquery.min.js“ &gt; &lt;/script&gt;</code></p></blockquote><p>2，找到 header.ejs<br>注释掉或者删掉 下面这句css引用<br><code>&lt;link href=&quot;//fonts.googleapis.com/css?family=Source+Code+Pro&quot; rel=”stylesheet” type=”text/css”&gt;</code><br>hexo server 之后。访问 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 就会看到blog主页了。</p><p>如果你成功在<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a><br>下看到了博客原型，那么再进行一些简单的操作之后就可以马上拥有自己的博客了，是不是很激动！</p><blockquote><p>行百里者半九十</p></blockquote><p>不到成功的那一刻，一切欣喜若狂都是不值得的！如果你已经迫不及待，我们继续：</p><h2 id="3-部署博客到服务器"><a href="#3-部署博客到服务器" class="headerlink" title="3 部署博客到服务器"></a>3 部署博客到服务器</h2><p>也就是把博客部署到github page提供的服务器上。</p><p>步骤</p><ul><li>首先回到git shell按ctrl+c，之后输入y即可</li></ul><ul><li>修改Hexo文件夹下_config.yml文件，如下图所示修改，repository后的地址要改成你自己的地址：<code>deploy: type: github repo: https://github.com/yourname/blog.git</code></li></ul><p>继续回到git shell输入命令：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo <span class="keyword">g</span></span><br><span class="line">hexo <span class="built_in">s</span></span><br><span class="line">hexo <span class="built_in">d</span></span><br></pre></td></tr></table></figure><p>命令解释:</p><ul><li>清除public，当 source 文件夹中的部分资源更改过之后，特别是对文件进行了删除或者路径的改变之后，需要执行这个命令，然后重新编译。<br>编译，一般部署上去的时候都需要编译一下，编译后，会出现一个 public 文件夹，将所有的md文件编译成html文件</li><li>开启本地服务，</li><li>部署博客到github上，如果一切顺利，你就通过访问usename.github.io访问你的博客了！<br>是的，现在你拥有了自己的博客！</li></ul><h1 id="发表博文"><a href="#发表博文" class="headerlink" title="发表博文"></a>发表博文</h1><p>千辛万苦建立了博客，那么我们来学习一下如何发表博文。</p><h2 id="新建博文"><a href="#新建博文" class="headerlink" title="新建博文"></a>新建博文</h2><p>继续回到git shell输入：</p><p>hexo new “新博文的名字”<br>即可在 Hexo\source_posts 目录中找到”新博文的名字.md”这个文件。你就可以使用maekdown编辑器打开进行编写博客内容了。</p><p><strong>Markdown编辑器</strong></p><p>推荐两款我所使用的markdown编辑器：</p><p><strong>MIU</strong>，据说是仿mac版的mou，界面相当友好，非常喜欢，官网都下载不了，挺小众，可能我就是典型的少说派，我也是偶然间得到，在此提供下载地址：<br>链接: <a href="http://pan.baidu.com/s/1slMPeTR" target="_blank" rel="noopener">http://pan.baidu.com/s/1slMPeTR</a><br>密码: 2pnk<br><strong>正在使用的Atom:</strong>更为先进的文本代码编辑器 ,由 Github 打造的下一代编程开发神器,其中支持markdown。<br>可能会遇到的问题</p><blockquote><p>hexo new [layout] “postName” #新建文章</p></blockquote><p>其中layout是可选参数，默认值为post。有哪些layout呢，请到scaffolds目录下查看，这些文件名称就是layout名称。当然你可以添加自己的layout，方法就是添加一个文件即可，同时你也可以编辑现有的layout，比如post的layout默认是hexo\scaffolds\post.md</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">&#123;</span> <span class="string">&#123;</span> <span class="string">title</span> <span class="string">&#125;</span> <span class="string">&#125;</span></span><br><span class="line"><span class="attr">date:</span> <span class="string">&#123;</span> <span class="string">&#123;</span> <span class="string">date</span> <span class="string">&#125;</span> <span class="string">&#125;</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>大括号与大括号之间我多加了个空格，否则会被转义，不能正常显示。<br>我想添加categories，以免每次手工输入，只需要修改这个文件添加一行</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">&#123;</span> <span class="string">&#123;</span> <span class="string">title</span> <span class="string">&#125;</span> <span class="string">&#125;</span></span><br><span class="line"><span class="attr">date:</span> <span class="string">&#123;</span> <span class="string">&#123;</span> <span class="string">date</span> <span class="string">&#125;</span> <span class="string">&#125;</span></span><br><span class="line"><span class="attr">categories:</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>postName是md文件的名字，同时也出现在你文章的URL中，postName如果包含空格，必须用”将其包围，postName可以为中文。</p><p>注意，所有文件：后面都必须有个空格，不然会报错。</p><p>看一下刚才生成的文件hexo\source_posts\postName.md</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">postName</span> <span class="comment">#文章页面上的显示名称，可以任意修改，不会出现在URL中</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2013</span><span class="bullet">-12</span><span class="bullet">-02</span> <span class="number">15</span><span class="string">:30:16</span> <span class="comment">#文章生成时间，一般不改，当然也可以任意修改</span></span><br><span class="line"><span class="attr">categories:</span> <span class="comment">#文章分类目录，可以为空，注意:后面有个空格</span></span><br><span class="line"><span class="attr">tags:</span> <span class="comment">#文章标签，可空，多标签请用格式[tag1,tag2,tag3]，注意:后面有个空格</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>始使用markdown格式输入你的正文。，你就可以用喜爱的编辑器尽情书写你的文章。关于markdown语法，可以参考我的文章Markdown简明语法。</p><p><strong>fancybox</strong><br>可能有人对这个Reading页面中图片的fancybox效果感兴趣，这个是怎么做的呢。<br>很简单，只需要在你的文章*.md文件的头上添加photos项即可，然后一行行添加你要展示的照片：<br></p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">layout: photo</span><br><span class="line">title: 我的阅历</span><br><span class="line">date: 2085<span class="string">-01</span><span class="string">-16</span> 07:33:44</span><br><span class="line"><span class="keyword">tags:</span> [hexo]</span><br><span class="line">photos:</span><br><span class="line">- http://bruce.u.qiniudn.com/2013/11/27/reading/photos<span class="string">-0</span>.jpg</span><br><span class="line">- http://bruce.u.qiniudn.com/2013/11/27/reading/photos<span class="string">-1</span>.jpg</span><br></pre></td></tr></table></figure><p></p><p>经过测试，文件头上的layout: photo可以省略。</p><p>不想每次都手动添加怎么办？同样的，打开您的hexo\scaffolds\photo.md<br></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">layout:</span> <span class="string">&#123;</span> <span class="string">&#123;</span> <span class="string">layout</span> <span class="string">&#125;</span> <span class="string">&#125;</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">&#123;</span> <span class="string">&#123;</span> <span class="string">title</span> <span class="string">&#125;</span> <span class="string">&#125;</span></span><br><span class="line"><span class="attr">date:</span> <span class="string">&#123;</span> <span class="string">&#123;</span> <span class="string">date</span> <span class="string">&#125;</span> <span class="string">&#125;</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="attr">photos:</span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p></p><p>然后每次可以执行带layout的new命令生成照片文章：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="type">photo</span> <span class="string">"photoPostName"</span> <span class="meta">#新建照片文章</span></span><br></pre></td></tr></table></figure><p>description<br>markdown文件头中也可以添加description，以覆盖全局配置文件中的description内容，请参考下文_config.yml的介绍。<br></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">hexo你的博客</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2013</span><span class="bullet">-11</span><span class="bullet">-22</span> <span class="number">17</span><span class="string">:11:54</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">tags:</span> <span class="string">[hexo]</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">你对本页的描述</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p></p><p>hexo默认会处理全部markdown和html文件，如果不想让hexo处理你的文件，可以在文件头中加入layout: false。</p><p><strong>文章摘要</strong><br>在需要显示摘要的地方添加如下代码即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">以上是摘要</span><br><span class="line"><span class="comment">&lt;!--more--&gt;</span></span><br><span class="line">以下是余下全文</span><br></pre></td></tr></table></figure><p>more以上内容即是文章摘要，在主页显示，more以下内容点击『&gt; Read More』链接打开全文才显示。</p><p>hexo中所有文件的编码格式均是UTF-8。</p><h2 id="优雅的在博客上插入图片"><a href="#优雅的在博客上插入图片" class="headerlink" title="优雅的在博客上插入图片"></a>优雅的在博客上插入图片</h2><p>看到很多博客上说使用七牛，但是这种方法可能是用着最爽的，我们来看一下如何使用：</p><p>首先确认 _config.yml 中更改 post_asset_folder:true 。<br>回到git shell，输入</p><p>npm install <a href="https://github.com/CodeFalling/hexo-asset-image" target="_blank" rel="noopener">https://github.com/CodeFalling/hexo-asset-image</a> –save</p><p>继续执行</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo <span class="keyword">g</span></span><br><span class="line">hexo <span class="built_in">s</span></span><br><span class="line">hexo <span class="built_in">d</span></span><br></pre></td></tr></table></figure><p>重新创建一个博客名字，然后发现Hexo\source_posts下多了一个与博客名字相同的空文件夹</p><p>然后就可以把我们博客中要用到的图片存放在这个文件夹下，需要时直接引用即可，是不是特别方便？<br>提醒：</p><p>写一篇博文时尽量只使用一种markdown编辑器，如果同时使用两个编辑器，我感觉不同编辑器对markdown语法的编译还是有一些差别的，用这个编辑器写好的格式用另一个编辑器打开却乱了！</p><h2 id="预览和发表"><a href="#预览和发表" class="headerlink" title="预览和发表"></a>预览和发表</h2><p>继续重复以下命令即可实现预览和发表，恭喜你已经在自己建设的博客网站上发表了第一篇博文！</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.  </span>hexo clean</span><br><span class="line"><span class="bullet">2.  </span>hexo g</span><br><span class="line"><span class="bullet">3.  </span>hexo s</span><br><span class="line"><span class="bullet">4.  </span>hexo d</span><br></pre></td></tr></table></figure><p>更高大上的发表博文的方法</p><p>使用Travis CI自动部署你的Hexo博客到Github,请参考<a href="http://i.woblog.cn/2016/05/04/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Travis%20CI%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E4%BD%A0%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2%E5%88%B0Github%E4%B8%8A/#more" target="_blank" rel="noopener">手把手教你使用Travis CI自动部署你的Hexo博客到Github上</a></p><p>使用could9在线更新博客，这样的话即使更换了电脑，也能优雅的更新博客了。详细请参考：用c9.io实现在线更新博客</p><h2 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h2><p>如果你跟我一样觉得原始的博客主题很low，想更换一个高逼格的，那我们继续往下进行：</p><p>选择主题</p><p>你可以在<a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="noopener">Themes·Hexo</a>上选择你喜欢的主题，我使用的Next主题</p><h2 id="安装Next主题"><a href="#安装Next主题" class="headerlink" title="安装Next主题"></a>安装Next主题</h2><p>参考<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">Next官方文档</a>,内容十分详尽！</p><p>安装主题的方法就是一句git命令：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://github.com/heroicyang/hexo-theme-modernist.git themes/modernist</span><br></pre></td></tr></table></figure><p>目录是否是modernist无所谓，只要与_config.yml文件一致即可。</p><p>安装完成后，打开hexo_config.yml，修改主题为modernist</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">theme:</span> modernist</span><br></pre></td></tr></table></figure><p>打开hexo\themes\modernist目录，编辑主题配置文件_config.yml：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span> <span class="comment">#配置页头显示哪些菜单</span></span><br><span class="line"><span class="comment">#  Home: /</span></span><br><span class="line"><span class="attr">  Archives:</span> <span class="string">/archives</span></span><br><span class="line"><span class="attr">  Reading:</span> <span class="string">/reading</span></span><br><span class="line"><span class="attr">  About:</span> <span class="string">/about</span></span><br><span class="line"><span class="comment">#  Guestbook: /about</span></span><br><span class="line"></span><br><span class="line"><span class="attr">excerpt_link:</span> <span class="string">Read</span> <span class="string">More</span> <span class="comment">#摘要链接文字</span></span><br><span class="line"><span class="attr">archive_yearly:</span> <span class="literal">false</span> <span class="comment">#按年存档</span></span><br><span class="line"></span><br><span class="line"><span class="attr">widgets:</span> <span class="comment">#配置页脚显示哪些小挂件</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">category</span></span><br><span class="line"><span class="comment">#  - tag</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">tagcloud</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">recent_posts</span></span><br><span class="line"><span class="comment">#  - blogroll</span></span><br><span class="line"></span><br><span class="line"><span class="attr">blogrolls:</span> <span class="comment">#友情链接</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">bruce</span> <span class="string">sha's</span> <span class="string">duapp</span> <span class="attr">wordpress:</span> <span class="attr">http://ibruce.duapp.com</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">bruce</span> <span class="string">sha's</span> <span class="attr">javaeye:</span> <span class="attr">http://buru.iteye.com</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">bruce</span> <span class="string">sha's</span> <span class="string">oschina</span> <span class="attr">blog:</span> <span class="attr">http://my.oschina.net/buru</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">bruce</span> <span class="string">sha's</span> <span class="string">baidu</span> <span class="attr">space:</span> <span class="attr">http://hi.baidu.com/iburu</span></span><br><span class="line"></span><br><span class="line"><span class="attr">fancybox:</span> <span class="literal">true</span> <span class="comment">#是否开启fancybox效果</span></span><br><span class="line"></span><br><span class="line"><span class="attr">duoshuo_shortname:</span> <span class="string">buru</span> <span class="comment">#多说账号</span></span><br><span class="line"></span><br><span class="line"><span class="attr">google_analytics:</span></span><br><span class="line"><span class="attr">rss:</span></span><br></pre></td></tr></table></figure><p>更新主题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes/modernist</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><h2 id="评论框"><a href="#评论框" class="headerlink" title="评论框"></a>评论框</h2><p>静态博客要使用第三方评论系统，hexo默认集成的是Disqus，因为你懂的，所以国内的话还是建议用<a href="https://hexo.io/plugins/" target="_blank" rel="noopener">多说</a><br>直接用你的微博/豆瓣/人人/百度/开心网帐号登录多说，做一下基本设置。如果使用modernist主题，在modernist_config.yml中配置duoshuo_shortname为多说的基本设置-&gt;域名中的shortname即可。你也可以在多说后台自定义一下多说评论框的格式，比如评论框的位置，对于css设置，可以<a href="http://dev.duoshuo.com/docs/4ff1cfd0397309552c000017" target="_blank" rel="noopener">参考这里</a>，我是在HeroicYang的基础上修改的。</p><p>如果你是有的其他第三方评论系统，将通用代码粘贴到hexo\themes\modernist\layout_partial\comment.ejs里面，如下：</p><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> <span class="keyword">if</span> (config.disqus_shortname &amp;&amp; page.comments)&#123; </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">"comment"</span>&gt;</span></span></span><br><span class="line"><span class="xml">  #你的通用代码</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> &#125; </span><span class="xml"><span class="tag">%&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="构建新页面"><a href="#构建新页面" class="headerlink" title="构建新页面"></a>构建新页面</h2><p>那些小图标都是一个新页面，需要手动创建，那么如何创建？</p><p>回到git shell，</p><p>hexo new page “页面名称”<br>比如你要创建一个about页面，就输入hexo new page “about”</p><p>正确显示各页面内容</p><p>发表博文后发现点击上面建立的页面后发现是空白页，比如，打开标签页面，发现是空白，或者提示找不到！</p><p>解决方法：以标签页为例，打开Hexo\source\tags下index.md文件，修改如下：</p><p>comments: false即关闭此页面的评论功能</p><p>type: “tags”这里的值根据你想更改的页面决定</p><p>更改过后，在重新部署到github上，你就可以点击各个页面查看，发现一切都是那么美好！</p><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>hexo支持的插件：<a href="https://hexo.io/plugins/" target="_blank" rel="noopener">Plugins | Hexo</a><br>想安装什么插件，按照相关README.md中介绍操作即可。</p><p>安装多说评论、不蒜子（或LeanCloud）和分享插件，参考:<a href="http://theme-next.iissnan.com/third-party-services.html#swfitype" target="_blank" rel="noopener">第三方服务集成</a>，介绍非常全面！好好用来装饰你的博客吧！</p><p>安装sitemap和feed插件时，如果遇到问题，可以参考:<a href="http://www.imys.net/20150513/wordpress-to-hexo.html#%E6%97%A0%E6%B3%95%E5%BC%80%E5%90%AFRSS%E5%92%8Csitemap" target="_blank" rel="noopener">博客搬迁记 - 从WordPress到Hexo</a>，安装sitemap后要到<a href="http://zhanzhang.baidu.com/?castk=LTE=" target="_blank" rel="noopener">百度站长</a>提交你的网站，首先要添加站点，然后在链接提交你的sitemap.xml，详细操作参考:<a href="http://www.gfwsb.com/2016/use-sitemap-for-hexo/" target="_blank" rel="noopener">为Hexo博客生成sitemap</a></p><p>安装swiftype插件，如果遇到问题，可以参考<a href="http://www.jerryfu.net/post/search-engine-for-hexo-with-swiftype-v2.html" target="_blank" rel="noopener">利用swiftype为hexo添加站内搜索</a></p><h2 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h2><p>考虑到博客的速度，同时也为了便于博客的迁移，图床是必须的。我墙裂推荐七牛，访问速度极快，支持日志、防盗链和水印。</p><p>免费用户有每月10GB流量+总空间10GB+PUT/DELETE 10万次请求+GET 100万次请求，这对个人博客来说足够，有一点要说明的是，七牛没有目录的概念，但是文件名可以包含/，比如2013/11/27/reading/photos-0.jpg，参考这里<a href="https://support.qiniu.com/hc/" target="_blank" rel="noopener">关于key-value存储系统</a>。</p><p>七牛除了作为图床还可以作为其他静态文件存储空间，比如我的个人站点首页有个字库文件和JS文件下载较慢，有时间会把它弄到七牛上去，以提高首页打开速度。请看这篇<a href="https://linux.cn/article-2311-1.html" target="_blank" rel="noopener">Linux中国采用七牛云存储支撑图片访问</a>。</p><p>如果非要说不足的话，就是文件管理界面不是很友好，不支持CNAME到分配的永久链接，也不能绑定未备案的自有域名，必须备案才可以。</p><p>如果你对七牛web版的文件管理界面不满意，可以用官方的<a href="http://docs.qiniu.com/tools/v6/index.html" target="_blank" rel="noopener">七牛云存储工具</a>。</p><p>您还可以使用如下图床服务 FarBox，Dropbox，又拍云</p><h2 id="主题优化"><a href="#主题优化" class="headerlink" title="主题优化"></a>主题优化</h2><p>Next主题很美观，个人也非常喜欢，但是一点令我们烦恼的就是主题加载的特别缓慢，那怎么优化呢？请参考一下两篇博文，作者已经总结的非常详细了，有需要的可以拜读一下，受益匪浅！</p><p><a href="http://www.gfwsb.com/2016/improveNexTspeed/" target="_blank" rel="noopener">提升Hexo的NexT主题加载速度</a></p><p><a href="http://www.5941740.cn/2016/02/19/%E4%BD%BF%E7%94%A8gulp%E7%B2%BE%E7%AE%80hexo%E5%8D%9A%E5%AE%A2%E4%BB%A3%E7%A0%81/" target="_blank" rel="noopener">使用gulp精简hexo博客代码</a></p><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p>购买域名，我是在<a href="https://account.aliyun.com/login/login.htm?oauth_callback=http://netcn.console.aliyun.com/core/domain/tclist" target="_blank" rel="noopener">万网</a>购买的，可以申请到国际域名，免去了备案的繁杂过程，我居然申请了两个，由于自学前端，所以就构建了一个网站来展示自己写的一些demo，【至于如何快速的构建一个网站，从购买域名，云空间到上传文件，你可以试一下这个<a href="http://www.xiaoerguo.com/" target="_blank" rel="noopener">网站</a>,但是现在可以用github page做服务器，也可以构建多个项目主页来展现demo，是我马上要研究的方向，自己上传云服务器感觉步骤好繁琐，看一下在github建立项目主页能否得到改善！】还一个正好闲置着，所以就拿来解析到github page上，以后就可以通过自己的域名访问自己的博客了！</p><p>如何操作：在 Hexo\source 文件夹里新建一个名为 CNAME 的文件，用文本编辑器打开，添加内容 yourwebsite.com （你的个人域名 ）。保存后，部署你的博客即可。如果这步遇到问题，也可手动在万网上解析，github page提供的IP：</p><p>192.30.252.153</p><p>192.30.252.154</p><h2 id="制作ICO图标"><a href="#制作ICO图标" class="headerlink" title="制作ICO图标"></a>制作ICO图标</h2><p>favicon.ico一般用于作为缩略图的网站标志，<a href="http://www.bitbug.net/" target="_blank" rel="noopener">在线制作网站</a><br>关于是否绑定域名</p><p>经过这几天的试用，关于是否绑定域名，发表一下自己的看法，如果你仅仅是使用个人主页来托管个人博客。绑定与否看你自己的想法，如果你还想使用github的项目主页来展示平时写的一些小练习demo，那我劝你不要绑定个人域名了，关于如何使用github的项目主页，请参考<a href="http://chitanda.me/2015/11/03/multiple-git-pages-in-one-github-account/" target="_blank" rel="noopener">单个GitHub帐号下添加多个GitHub Pages的相关问题</a>,这样你就可以直接在需要展示的项目下添加gh-pages分支，然后通过访问“用户名。github.io/项目名/*.html”来查看页面展示效果了。这多方便，不用自己在上传云空间了，省去了一堆麻烦事！</p><p>#至此，基本操作介绍完毕，以下内容普通用户无需了解。<br>默认目录结构：<br></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── .deploy</span><br><span class="line">├── <span class="keyword">public</span></span><br><span class="line">├── scaffolds</span><br><span class="line">├── scripts</span><br><span class="line">├── <span class="keyword">source</span></span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">├── themes</span><br><span class="line">├── _config.yml</span><br><span class="line">└── <span class="keyword">package</span>.json</span><br></pre></td></tr></table></figure><p></p><ul><li>deploy：执行hexo deploy命令部署到GitHub上的内容目录</li><li>public：执行hexo generate命令，输出的静态网页内容目录</li><li>scaffolds：layout模板文件目录，其中的md文件可以添加编辑</li><li>scripts：扩展脚本目录，这里可以自定义一些javascript脚本</li><li>source：文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。<ul><li>drafts：草稿文章</li><li>posts：发布文章</li></ul></li><li>themes：主题文件目录</li><li>_config.yml：全局配置文件，大多数的设置都在这里</li><li>package.json：应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮</li></ul><p>接下来是重头戏_config.yml，做个简单说明：<br></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: http://zespia.tw/hexo/docs/configure.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/tommy351/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site #整站的基本信息</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">不如</span> <span class="comment">#网站标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">码农，程序猿，未来的昏析师</span> <span class="comment">#网站副标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">bruce</span> <span class="string">sha's</span> <span class="string">blog</span> <span class="string">| java | scala | bi #网站描述，给搜索引擎用的，在生成html中的head-&gt;meta中可看到</span></span><br><span class="line"><span class="string"></span><span class="attr">author:</span> <span class="string">bruce</span> <span class="comment">#网站作者，在下方显示</span></span><br><span class="line"><span class="attr">email:</span> <span class="string">bu.ru@qq.com</span> <span class="comment">#联系邮箱</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span> <span class="comment">#语言</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL #域名和文件结构</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line"><span class="attr">url:</span> <span class="attr">http://ibruce.info</span> <span class="comment">#你的域名</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing #写文章选项</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment"># File name of new posts</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span> <span class="comment">#默认layout方式</span></span><br><span class="line"><span class="attr">auto_spacing:</span> <span class="literal">false</span> <span class="comment"># Add spaces between asian characters and western characters</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line"><span class="attr">external_link:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line"><span class="attr">max_open_file:</span> <span class="number">100</span></span><br><span class="line"><span class="attr">multi_thread:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">highlight:</span> <span class="comment">#代码高亮</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span> <span class="comment">#是否启用</span></span><br><span class="line"><span class="attr">  line_number:</span> <span class="literal">false</span> <span class="comment">#是否显示行号</span></span><br><span class="line"><span class="attr">  tab_replace:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Category &amp; Tag #分类与标签</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span> <span class="comment"># default</span></span><br><span class="line"><span class="attr">category_map:</span></span><br><span class="line"><span class="attr">tag_map:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Archives #存档，这里的说明好像不对。全部选择1，这个选项与主题中的选项有时候会有冲突</span></span><br><span class="line"><span class="comment">## 2: Enable pagination</span></span><br><span class="line"><span class="comment">## 1: Disable pagination</span></span><br><span class="line"><span class="comment">## 0: Fully Disable</span></span><br><span class="line"><span class="attr">archive:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">category:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">tag:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Server #本地服务参数</span></span><br><span class="line"><span class="comment">## Hexo uses Connect as a server</span></span><br><span class="line"><span class="comment">## You can customize the logger format as defined in</span></span><br><span class="line"><span class="comment">## http://www.senchalabs.org/connect/logger.html</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">4000</span></span><br><span class="line"><span class="attr">logger:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">logger_format:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format #日期显示格式</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">MMM</span> <span class="string">D</span> <span class="string">YYYY</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="attr">H:mm:ss</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination #分页设置</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">10</span> <span class="comment">#每页10篇文章</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Disqus #社会化评论disqus，我使用多说，在主题中配置</span></span><br><span class="line"><span class="attr">disqus_shortname:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions #插件，暂时未安装插件</span></span><br><span class="line"><span class="comment">## Plugins: https://github.com/tommy351/hexo/wiki/Plugins</span></span><br><span class="line"><span class="comment">## Themes: https://github.com/tommy351/hexo/wiki/Themes</span></span><br><span class="line"><span class="comment">## 主题</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">modernist</span> <span class="comment"># raytaylorism # pacman # modernist # light</span></span><br><span class="line"><span class="attr">exclude_generator:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment #部署</span></span><br><span class="line"><span class="comment">## Docs: http://zespia.tw/hexo/docs/deploy.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">github</span></span><br><span class="line"><span class="attr">  repository:</span> <span class="string">git@github.com:bruce-sha/bruce-sha.github.com.git</span> <span class="comment">#你的GitHub Pages仓库</span></span><br></pre></td></tr></table></figure><p></p><h2 id="修改局部页面"><a href="#修改局部页面" class="headerlink" title="修改局部页面"></a>修改局部页面</h2><p>页面展现的全部逻辑都在每个主题中控制，源代码在hexo\themes\你使用的主题\中，以modernist主题为例：<br></p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── languages          <span class="meta">#多语言</span></span><br><span class="line">|   ├── <span class="keyword">default</span>.yml    <span class="meta">#默认语言</span></span><br><span class="line">|   └── zh-CN.yml      <span class="meta">#中文语言</span></span><br><span class="line">├── <span class="keyword">layout</span>             <span class="meta">#布局，根目录下的*.ejs文件是对主页，分页，存档等的控制</span></span><br><span class="line">|   ├── _partial       <span class="meta">#局部的布局，此目录下的*.ejs是对头尾等局部的控制</span></span><br><span class="line">|   └── _widget        <span class="meta">#小挂件的布局，页面下方小挂件的控制</span></span><br><span class="line">├── source             <span class="meta">#源码</span></span><br><span class="line">|   ├── css            <span class="meta">#css源码</span></span><br><span class="line">|   |   ├── _base      <span class="meta">#*.styl基础css</span></span><br><span class="line">|   |   ├── _partial   <span class="meta">#*.styl局部css</span></span><br><span class="line">|   |   ├── fonts      <span class="meta">#字体</span></span><br><span class="line">|   |   ├── images     <span class="meta">#图片</span></span><br><span class="line">|   |   └── style.styl <span class="meta">#*.styl引入需要的css源码</span></span><br><span class="line">|   ├── fancybox       <span class="meta">#fancybox效果源码</span></span><br><span class="line">|   └── js             <span class="meta">#javascript源代码</span></span><br><span class="line">├── _config.yml        <span class="meta">#主题配置文件</span></span><br><span class="line">└── README.md          <span class="meta">#用GitHub的都知道</span></span><br></pre></td></tr></table></figure><p></p><p>如果你需要修改头部，直接修改hexo\themes\modernist\layout_partial\header.ejs，比如头上加个搜索框：<br></p><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"search"</span> <span class="attr">action</span>=<span class="string">"//google.com/search"</span> <span class="attr">method</span>=<span class="string">"get"</span> <span class="attr">accept-charset</span>=<span class="string">"utf-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"search"</span> <span class="attr">name</span>=<span class="string">"q"</span> <span class="attr">id</span>=<span class="string">"search"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> <span class="attr">autocorrect</span>=<span class="string">"off"</span> <span class="attr">autocapitalize</span>=<span class="string">"off"</span> <span class="attr">maxlength</span>=<span class="string">"20"</span> <span class="attr">placeholder</span>=<span class="string">"Search"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"q"</span> <span class="attr">value</span>=<span class="string">"site:&lt;%-</span></span></span><span class="ruby"> config.url.replace(<span class="regexp">/^https?:\/\//</span>, <span class="string">''</span>) </span><span class="xml"><span class="tag"><span class="string">%&gt;"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p></p><p>将如上代码加入即可，您需要修改css以便这个搜索框比较美观。</p><p>再如，你要修改页脚版权信息，直接编辑hexo\themes\modernist\layout_partial\footer.ejs。同理，你需要修改css，直接去修改对应位置的styl文件。</p><h2 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h2><p>页面上显示访问次数可以使用 <a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">不蒜子</a>，两行代码即可搞定。</p><p>因Google Analytics偶尔被墙，故用百度统计，以modernist主题为例，介绍如何添加。<br>编辑文件hexo\themes\modernist_config.yml，增加配置选项：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">baidu_tongji:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>新建文件hexo\themes\modernist\layout_partial\baidu_tongji.ejs，内容如下：</p><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> <span class="keyword">if</span> (theme.baidu_tongji)&#123; </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span></span><br><span class="line"><span class="xml">#你的百度统计代码</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> &#125; </span><span class="xml"><span class="tag">%&gt;</span></span></span><br></pre></td></tr></table></figure><p>注册并登录百度统计获取你的统计代码。</p><p>编辑文件hexo\themes\modernist\layout_partial\head.ejs，在『/head』之前增加：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="meta">%</span>- partial<span class="comment">('baidu_tongji')</span> <span class="meta">%</span>&gt;</span><br></pre></td></tr></table></figure><p>重新生成并部署你的站点。</p><p>不出意外的话，在你的站点的每个页面的左上角都会看到一个恶心的百度LOGO。你只能在『百度统计首页-&gt;网站列表-&gt;获取代码-&gt;系统管理设置-&gt;统计图标设置-&gt;显示图标』，把那个勾去掉。百度真是恶心，我准备还是用Google Analytics。</p><h2 id="分享"><a href="#分享" class="headerlink" title="分享"></a>分享</h2><p>我没有添加分享，觉得这个不是很必要，导致页面看起来啰嗦。以加网为例介绍如何添加：</p><ul><li>在hexo\themes\modernist\layout_partial\post下新建jiathis.ejs文件。<br>注册加网获得你的分享代码，写入jiathis.ejs。</li><li>在hexo\themes\modernist\layout_partial\article.ejs中，添加&lt;%-partial(‘post/jiathis’)%&gt;。<br>-分享服务还可以使用如下企业提供的技术<a href="http://www.jiathis.com/" target="_blank" rel="noopener">加网</a>，<a href="http://www.bshare.cn/" target="_blank" rel="noopener">bShare</a>，<a href="http://share.baidu.com/" target="_blank" rel="noopener">百度分享</a>。</li></ul><p>网站图标</p><p>看一下hexo\themes\modernist\layout_partial\head.ejs，找到这句：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link <span class="attribute">rel</span>=<span class="string">"icon"</span> <span class="attribute">type</span>=<span class="string">"image/x-icon"</span> <span class="attribute">href</span>=<span class="string">"&lt;%- config.root %&gt;favicon.ico"</span>&gt;</span><br></pre></td></tr></table></figure><p>你懂的，将你的favicon.ico放到工程根目录下即可，也就是hexo\source目录。可以<a href="http://www.faviconer.com/" target="_blank" rel="noopener">在Faviconer</a>制作你的ico图标，国内有<a href="http://www.bitbug.net/" target="_blank" rel="noopener">比特虫</a>。</p><h2 id="自定义挂件"><a href="#自定义挂件" class="headerlink" title="自定义挂件"></a>自定义挂件</h2><p>除了默认已提供的挂件外，你还可以自定义自己的小挂件，在hexo\themes\modernist\layout_widget\下，新建自己的ejs文件，如myWidget.ejs，然后在配置文件hexo\themes\modernist_config.yml中配置。<br></p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">widgets:</span></span><br><span class="line">  - myWidget</span><br></pre></td></tr></table></figure><p></p><p>用上述方法可以添加新浪微博小挂件。</p><ul><li>生成自己的微博组件。</li><li>添加hexo\themes\modernist\layout_widget\weibo.ejs文件。</li><li>配置hexo\themes\modernist_config.yml。<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2></li></ul><p>安装插件：<br></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> &lt;<span class="keyword">plugin</span>-<span class="keyword">name</span>&gt; <span class="comment">--save</span></span><br></pre></td></tr></table></figure><p></p><p>启用插件：在*hexo_config.yml文件添加：<br></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">plugins:</span></span><br><span class="line">- <span class="params">&lt;plugin-name&gt;</span>  <span class="meta">#插件名</span></span><br></pre></td></tr></table></figure><p></p><p>升级插件：<br></p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> update</span><br></pre></td></tr></table></figure><p></p><p>卸载插件：<br></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">uninstall</span> &lt;<span class="keyword">plugin</span>-<span class="keyword">name</span>&gt;</span><br></pre></td></tr></table></figure><p></p><p>RSS插件<br>将上述命令中的『plugin-name』，替换为hexo-generator-feed。一旦安装完成，你可以在配置显示你站点的RSS，文件路径\atom.xml。</p><p>你可以用rss作为迁移工具，用如下命令读取其他位置的rss：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo migrate rss &lt;<span class="built_in">source</span>&gt;</span><br></pre></td></tr></table></figure><p>『source』是本地或网络文件路径。</p><p>Sitemap插件<br>将上述命令中的『plugin-name』，替换为hexo-generator-sitemap。你可以将你站点地图提交给搜索引擎，文件路径\sitemap.xml。</p><p>更多插件的安装方法，请参考<a href="https://github.com/hexojs/hexo/wiki/Plugins" target="_blank" rel="noopener">官方Wiki</a>。</p><p>如果你按照上述步骤做，但插件不起作用，没有生成atom.xml和sitemap.xml，也没有报错，那么你应该cd到你的hexo初始化目录，在该目录下重新安装插件，重试。</p><h2 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h2><p>hexo支持从其他类型站点迁移，如通用RSS，Jekyll，Octopress，WordPress等，这一部分我没试过。请参考官方文档Hexo Migration。</p><h2 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h2><p>你可以到<a href="http://www.sousuoyinqingtijiao.com/" target="_blank" rel="noopener">屈站长</a>提交你的站点给搜索引擎。其他内容如添加站点或页面的description，提交Sitemap，添加百度统计，Google Analytics等等，参考本文其他章节的内容，不再一一阐述。</p><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>更新hexo：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> update -g hexo</span><br></pre></td></tr></table></figure><p>更新主题：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes/你的主题</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><p></p><p>更新插件：<br></p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> update</span><br></pre></td></tr></table></figure><p></p><p>干掉IE</p><p>Kill IE6 提示的javascript代码，请自行搜索。</p><h2 id="换机器"><a href="#换机器" class="headerlink" title="换机器"></a>换机器</h2><p>你要保留好自己的博客源码。换机器写博客，就只能使用各种网盘的同步功能，或者你把你的站点源文件提交到某代码托管服务器。另外，貌似这篇很牛逼，Hexo 服务器端布署及 Dropbox 同步。</p><p>我的办法是这样的，先在一个目录下做好Node+Git+Hexo的绿色环境，写个hexos.bat可以一键启动hexo工作台，把整个目录用Dropbox同步，这样随便在办公室或家的任何笔记本台式机都可以写博客，也不用处理什么文件拷贝备份的事情，非常爽。</p><h2 id="统计功能"><a href="#统计功能" class="headerlink" title="统计功能"></a>统计功能</h2><p>为hexo博客添加访问次数统计功能</p><p>其它</p><p>网站加速</p><p><a href="http://www.webluker.com/" target="_blank" rel="noopener">Webluker-CDN 网站加速 免费CDN DNS解析</a></p><p>Webluker-FAQ索引</p><p>网站监控</p><p><a href="http://www.jiankongbao.com/" target="_blank" rel="noopener">监控宝-网站监控 网页监控 服务器监控</a></p><p><a href="http://www.jiankongbao.com/faq" target="_blank" rel="noopener">监控宝-常见问题</a></p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul><li><p><a href="http://blog.netpi.me/%E5%AE%9E%E7%94%A8/hexo/" target="_blank" rel="noopener">hexo + github + 多说 来搭建免费博客</a></p></li><li><p><a href="http://www.jerryfu.net/post/search-engine-for-hexo-with-swiftype-v2.html" target="_blank" rel="noopener">利用swiftype为hexo添加站内搜索</a></p></li><li><p><a href="http://www.imys.net/20150513/wordpress-to-hexo.html#%E6%97%A0%E6%B3%95%E5%BC%80%E5%90%AFRSS%E5%92%8Csitemap" target="_blank" rel="noopener">博客搬迁记 - 从WordPress到Hexo</a></p></li><li><p><a href="http://www.tuicool.com/articles/umEBVfI" target="_blank" rel="noopener">在 hexo中无痛使用本地图片</a></p></li><li><p><a href="http://i.woblog.cn/2016/05/04/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Travis%20CI%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E4%BD%A0%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2%E5%88%B0Github%E4%B8%8A/#more" target="_blank" rel="noopener">手把手教你使用Travis CI自动部署你的Hexo博客到Github上</a></p></li><li><p><a href="http://www.gfwsb.com/2016/use-sitemap-for-hexo/" target="_blank" rel="noopener">为Hexo博客生成sitemap</a></p></li></ul><ul><li><p><a href="http://www.5941740.cn/2016/02/19/%E4%BD%BF%E7%94%A8gulp%E7%B2%BE%E7%AE%80hexo%E5%8D%9A%E5%AE%A2%E4%BB%A3%E7%A0%81/" target="_blank" rel="noopener">使用gulp精简hexo博客代码</a></p></li><li><p><a href="http://chitanda.me/2015/11/03/multiple-git-pages-in-one-github-account/" target="_blank" rel="noopener">单个GitHub帐号下添加多个GitHub Pages的相关问题</a></p></li><li><p><a href="http://ibruce.info/2013/11/22/hexo-your-blog/" target="_blank" rel="noopener">hexo你的博客</a></p></li></ul><blockquote><p>本文首发于个人技术博客 <a href="https://liliuzhu.gitee.io/blog">https://liliuzhu.gitee.io/blog</a></p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Nov 03 2020 20:10:34 GMT+0800 (GMT+08:00) --&gt;&lt;blockquote&gt;&lt;ul&gt;&lt;li&gt;原文作者：&lt;a href=&quot;https://cherryblog.site&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;cherry&lt;/a&gt;&lt;/li&gt;&lt;li&gt;原文地址：&lt;a href=&quot;https://cherryblog.site/Use-Gitpagehexo-to-develop-their-own-blog.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;【基础】利用 hexo + Gitpage 开发自己的博客&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;p&gt;进入程序员这个坑之后就开始自己在网上扒资料，然而资料太多，情况太复杂，主要是看见别人的博客，感觉好高大上，并且感觉在茫茫的互联网有自己的小天地感觉也是极好的。不是为了给别人看，而是为了 记录自己的成长，记录自己的每一个脚印。&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://liliuzhu.gitee.io/blog/categories/Hexo/"/>
    
      <category term="转载" scheme="https://liliuzhu.gitee.io/blog/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="Hexo建站" scheme="https://liliuzhu.gitee.io/blog/tags/Hexo%E5%BB%BA%E7%AB%99/"/>
    
      <category term="Githubpages" scheme="https://liliuzhu.gitee.io/blog/tags/Githubpages/"/>
    
  </entry>
  
  <entry>
    <title>搭建可通过外网访问的内网服务器</title>
    <link href="https://liliuzhu.gitee.io/blog/2017/12/Intranet_mapping.html"/>
    <id>https://liliuzhu.gitee.io/blog/2017/12/Intranet_mapping.html</id>
    <published>2017-12-15T23:55:23.000Z</published>
    <updated>2020-05-07T09:22:10.537Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Nov 03 2020 20:10:34 GMT+0800 (GMT+08:00) --><p>这是本人，第一次写博客，文采不好，技术也菜鸟，请不要见怪。</p><p>前一段时间裸辞了，于是开始广投简历。可是现实是非常的残酷，年底了面试的通知很少。想着是不是自己的简历上干货太少了，不如把自己之前做的项目连接放在简历上。</p><a id="more"></a><p>可是可是。。。，现实又很残酷。我们做的项目大多是企业内部系统，只能通过内网来访问。更为严重的是我们的主管是不会告诉我们客户的正式服务器的。出来面试，连作品连接都没有，都不好意思说自己是做web前端的[尴尬]。</p><p>那怎么办呢？没有作品链接，简历被淘汰的概率也会大好多，后来想起来可以用自己的电脑搭建一台服务器，说干就干。<br>后来找到了一些免费的第三方工具并且都一一实验了一下，有些成功了，有些也失败了。</p><h2 id="ittun"><a href="#ittun" class="headerlink" title="ittun"></a>ittun</h2><p>但是可能是我的网络环境的问题，实际用的时候却是这样的<br><img src="//liliuzhu.github.io/CDN/images/blog/2019/1605b39a3eabc10c.png" alt="一直处于重新连接状态"><br>结果第一个内网映射工具，使用失败。<br>附上官网地址<a href="http://www.ittun.com/" target="_blank" rel="noopener">http://www.ittun.com/</a></p><h2 id="localtunnel"><a href="#localtunnel" class="headerlink" title="localtunnel"></a>localtunnel</h2><p>也是网上找的，是基于Node.js的一个模块，说是可以将内网服务器暴露至公网。基于node.js，倒很适合我的胃口。结果也试几次还是失败。也可能是我用的方法还不对，继续寻找。</p><h2 id="JNat"><a href="#JNat" class="headerlink" title="JNat"></a>JNat</h2><p>终于这个是可以用的了，试了几次除了速度慢一些，还都好用，不过需要这个工具需要在官网上申请免费的key，而且一个帐号只能申请一个免费的key，可以指定二级域名。不过后来测试的时候还是发现了一个问题，就是在客户端上传文件的JNat会出现错误，而且文件上传失败.希望以后能够得到解决。<br>在此附上JNat官网地址<a href="http://www.j2eeall.com/" target="_blank" rel="noopener">http://www.j2eeall.com</a></p><h2 id="natapp"><a href="#natapp" class="headerlink" title="natapp"></a>natapp</h2><p>这个工具也是比较好用的，不过也需要去官网注册，而且还要实名认证，还是比较麻烦的。一个注册用户可免费拥有2条不同协议的隧道。<br>客户端上传文件时也没有问题。不过这个工具也有不好的地方，就是免费版不能自定义二级域名。过一段时间不用，再去重新开启映射就会随机更新一个二级域名，这点比较坑，要是在app中应用岂不也是每次更新了二级域名，都要重新打包不可。<br>不过，这已经不错了，毕竟人家是免费的[呲牙]！附上官方网址<a href="https://natapp.cn" target="_blank" rel="noopener">https://natapp.cn</a></p><h2 id="Sunny-Ngrok"><a href="#Sunny-Ngrok" class="headerlink" title="Sunny-Ngrok"></a>Sunny-Ngrok</h2><p>这是最近才发现的一个内网穿透工具，好像还挺好用，官网讨论群也比较多。官网上介绍的也比较详细。官网上说其具有以下几方面优点：</p><ol><li>提供免费内网穿透服务，免费服务器支持绑定自定义域名</li><li>管理内网服务器，内网web进行演示</li><li>快速开发微信程序和第三方支付平台调试</li><li>本地WEB外网访问、本地开发微信、TCP端口转发</li><li>本站新增FRP服务器，基于 FRP 实现https、udp转发</li><li>无需任何配置，下载客户端之后直接一条命令让外网访问您的内网不再是距离</li></ol><p>然而对于我来收说比较的可悲，和ittun一样都存在着一样的问题—无法连接<br><img src="//liliuzhu.github.io/CDN/images/blog/2019/1605b39a40bb08fc.png" alt="这里写图片描述"></p><p>应该和ittun想同的原因，也不知道该怎么破，还在的等待技术群的回复。附上官网链接<a href="https://www.ngrok.cc/" target="_blank" rel="noopener">https://www.ngrok.cc/</a></p><blockquote><p>本文首发于个人技术博客 <a href="https://liliuzhu.gitee.io/blog">https://liliuzhu.gitee.io/blog</a></p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Nov 03 2020 20:10:34 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;这是本人，第一次写博客，文采不好，技术也菜鸟，请不要见怪。&lt;/p&gt;&lt;p&gt;前一段时间裸辞了，于是开始广投简历。可是现实是非常的残酷，年底了面试的通知很少。想着是不是自己的简历上干货太少了，不如把自己之前做的项目连接放在简历上。&lt;/p&gt;
    
    </summary>
    
      <category term="原创" scheme="https://liliuzhu.gitee.io/blog/categories/%E5%8E%9F%E5%88%9B/"/>
    
    
      <category term="内网映射" scheme="https://liliuzhu.gitee.io/blog/tags/%E5%86%85%E7%BD%91%E6%98%A0%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://liliuzhu.gitee.io/blog/2017/12/hello-world.html"/>
    <id>https://liliuzhu.gitee.io/blog/2017/12/hello-world.html</id>
    <published>2017-12-01T23:55:23.000Z</published>
    <updated>2019-07-24T07:46:07.023Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Nov 03 2020 20:10:34 GMT+0800 (GMT+08:00) --><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><a id="more"></a><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Nov 03 2020 20:10:34 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
